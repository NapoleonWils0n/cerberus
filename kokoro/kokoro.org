#+STARTUP: content
* kokoro
** resources

[[https://github.com/hexgrad/kokoro]]

[[https://huggingface.co/hexgrad/Kokoro-82M]]

[[https://huggingface.co/hexgrad/Kokoro-82M/tree/main/voices]]

[[https://huggingface.co/spaces/hexgrad/Kokoro-TTS]]

** shell.nix

#+begin_src nix
{ pkgs ? import <nixpkgs> {} }:

let
  pythonPackages = pkgs.python312Packages;
in
pkgs.mkShell {
  name = "kokoro-tts";
  # Increase stack size.
  NIX_SHELL_SET_LOCALE = "en_US.UTF-8";
  shellHook = ''
    echo "ulimit -s unlimited"
    # Set the locale.
    export LC_ALL="en_US.UTF-8"
    export LANG="en_US.UTF-8"
    export PYTHONIOENCODING="utf-8"

    if [ ! -d ".venv" ]; then
      echo "Creating Python virtual environment using Nix-provided Python..."
      ${pkgs.python312}/bin/python3.12 -m venv .venv
    else
      echo "Re-activating existing Python virtual environment..."
    fi
    source .venv/bin/activate
    echo "Virtual environment activated."

    pip install -q "kokoro>=0.9.4" soundfile

    export CUDA_VISIBLE_DEVICES=0 # Or adjust if you have multiple GPUs
    export XDG_CACHE_HOME="$HOME/.cache" # Ensure a valid cache directory
    export PATH="$PATH:${pkgs.cudaPackages.cudatoolkit}/bin" # Corrected path. Adjust version as needed.
    export LD_LIBRARY_PATH="$LD_LIBRARY_PATH:${pkgs.cudaPackages.cudatoolkit}/lib:${pkgs.cudaPackages.cudatoolkit}/lib64:${pkgs.stdenv.cc.cc.lib}/lib" # Include stdenv

  '';

  # Minimal buildInputs for CUDA 12
  buildInputs = [
    pkgs.espeak
    pkgs.python312 # Ensure base python is available
    pythonPackages.setuptools
    pythonPackages.wheel
    pkgs.cudaPackages.cudatoolkit # Default CUDA (likely 12.x)
    pkgs.cudaPackages.cudnn
    pkgs.stdenv.cc.cc # Include the compiler
    pkgs.python312Packages.ipython
  ];
}
#+end_src

** british voices

female voices

#+begin_example
bf_alice.pt
bf_emma.pt
bf_isabella.pt
bf_lily.pt
#+end_example

male voices

#+begin_example
bm_daniel.pt
bm_fable.pt
bm_george.pt
bm_lewis.pt
#+end_example

** python script

#+begin_src python
#!/usr/bin/env nix-shell
#!nix-shell -i python3 -p python3

from kokoro import KPipeline
from IPython.display import display, Audio
import soundfile as sf
import torch
pipeline = KPipeline(lang_code='b')
text = '''
[Kokoro](/kˈOkəɹO/) is an open-weight TTS model with 82 million parameters. Despite its lightweight architecture, it delivers comparable quality to larger models while being significantly faster and more cost-efficient. With Apache-licensed weights, [Kokoro](/kˈOkəɹO/) can be deployed anywhere from production environments to personal projects.
'''
generator = pipeline(text, voice='bf_emma')
for i, (gs, ps, audio) in enumerate(generator):
    print(i, gs, ps)
    display(Audio(data=audio, rate=24000, autoplay=i==0))
    sf.write(f'{i}.wav', audio, 24000)

#+end_src

** resample audio to 48000 khz

#+begin_src sh
ffmpeg -i input.wav -ar 48000 output.wav
#+end_src
