#+STARTUP: content
* gpt-sovits nixos
** resources

[[https://github.com/RVC-Boss/GPT-SoVITS]]

** git clone gpt-sovits

#+begin_src sh
git clone https://github.com/RVC-Boss/GPT-SoVITS.git
cd GPT-SoVITS
#+end_src

** shell.nix

#+begin_src nix
{ pkgs ? import <nixpkgs> {} }:

let
  pythonPackages = pkgs.python3Packages;
in
pkgs.mkShell {
  name = "gpt-sovits-env";
  # Increase stack size to prevent potential issues during installation or runtime.
  NIX_SHELL_SET_LOCALE = "en_US.UTF-8";
  shellHook = ''
    echo "Entering nix-shell for GPT-SoVITS.  Setting up environment..."
    echo "Make sure you have CUDA setup if you intend to use your GPU."
    echo "You can activate it with: nix-shell -p nixpkgs.cudaPackages.cudatoolkit_12 --command 'nix-shell'" # Or 12
    echo "If you run into issues, try increasing the stack size:"
    echo "ulimit -s unlimited"
    # Set the locale.  This can help avoid errors with some Python libraries.
    export LC_ALL="en_US.UTF-8"
    export LANG="en_US.UTF-8"
    export PYTHONIOENCODING="utf-8"
  '';

  # List of Nix packages required.  These are a combination of the install.sh
  # dependencies and some Nix-specific additions.
  buildInputs = [
    pkgs.git
    pkgs.wget
    pkgs.ffmpeg
    pkgs.cmake
    pkgs.gcc
    pkgs.make
    pkgs.coreutils
    # CUDA is added to buildInputs, but you'd typically activate it
    # separately as shown in the shellHook.  This is because you might
    # want a shell *without* CUDA sometimes.
    # pkgs.cudaPackages.cudatoolkit_12 # Or 12, if you have a very new card.
    # Python and its dependencies.
    pkgs.python3
    pythonPackages.pip
    #  pythonPackages.setuptools # Not always needed, pip usually handles this
    pythonPackages.wheel
    pythonPackages.numpy
    pythonPackages.scipy
    pythonPackages.matplotlib
    pythonPackages.requests
    pythonPackages.tqdm
    pythonPackages.librosa
    pythonPackages.pyworld
    pythonPackages.numba
    pythonPackages.inflect
    pythonPackages.pynvml # For GPU monitoring, might not be strictly required.
    pythonPackages.torch_1_13
    pythonPackages.torchaudio_0_13
    pythonPackages.transformers
    pythonPackages.webui
    pythonPackages.gdown
    pythonPackages.sentencepiece
    pythonPackages.tensorboard
    pythonPackages.einops
    pythonPackages.psutil
    pythonPackages.fastapi
    pythonPackages.uvicorn
    pythonPackages.websockets
    pythonPackages.gradio
    pythonPackages.orjson
    pythonPackages.tiktoken
    pythonPackages.pydantic
    pythonPackages.typing_extensions
    pythonPackages.huggingface_hub
    pythonPackages.bitsandbytes # For 8 bit quantization
    pythonPackages.accelerate
  ];

  #  Libraries needed at runtime.  Useful for ensuring that the environment
  #  has the correct shared libraries.  Less critical on NixOS, but good practice.
  LD_LIBRARY_PATH = with pkgs; lib.makeLibraryPath [
     pkgs.cudaPackages.cudatoolkit_12 # Or 12
     pkgs.cudaPackages.cudnn_8_9 #  Make sure the version matches your CUDA version
  ];

  # Python environment setup.  This creates a virtual environment
  # and installs the python dependencies.
  # It's better to do this *inside* the shellHook, so it only happens
  # when you enter the shell.  Doing it here can cause issues with Nix's
  # dependency tracking.  I've moved this into the shellHook below.
  # postActivate = ''
  #   python3 -m venv .venv
  #   source .venv/bin/activate
  #   pip install -r requirements.txt
  # ''
  shellHook = shellHook + ''
    if [ ! -d ".venv" ]; then
      echo "Creating and activating Python virtual environment..."
      python3 -m venv .venv
    else
      echo "Re-activating existing Python virtual environment..."
    fi
    source .venv/bin/activate
    # Install the specific versions of torch and torchaudio.  This is crucial
    # for compatibility, and the versions in Nixpkgs might not be correct.
    #  We do this *before* installing the other requirements.
    # pip install torch==1.13.1+cu117 torchaudio==0.13.1+cu117 -f https://download.pytorch.org/whl/torch_stable.html
    #  Install the requirements.txt.  Use a relative path.
    if [ -f "requirements.txt" ]; then
      echo "Installing Python dependencies from requirements.txt..."
      pip install -r requirements.txt
    else
      echo "No requirements.txt found.  Make sure it's in the same directory as shell.nix, or that you've cloned the GPT-SoVITS repo."
    fi
    # Install the specific version of protobuf
    pip install protobuf==3.20.3
    echo "Python environment setup complete."
    echo "You can now run GPT-SoVITS."
    echo " "
  '';
}
#+end_src
