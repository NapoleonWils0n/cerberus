#+STARTUP: content
* gpt-sovits nixos
** resources

[[https://github.com/RVC-Boss/GPT-SoVITS]]

** git clone gpt-sovits

#+begin_src sh
git clone https://github.com/RVC-Boss/GPT-SoVITS.git
cd GPT-SoVITS
#+end_src

** requirements.txt

comment out pyopenjtalk in the requirements.txt file

#+begin_src 
vi requirements.txt
#+end_src

#+begin_example
#pyopenjtalk>=0.4.1 # error
#+end_example

** shell.nix

#+begin_src nix
{ pkgs ? import <nixpkgs> {} }:

let
  pythonPackages = pkgs.python312Packages;
in
pkgs.mkShell {
  name = "gpt-sovits-env";
  # Increase stack size.
  NIX_SHELL_SET_LOCALE = "en_US.UTF-8";
  shellHook = ''
    echo "Entering nix-shell for GPT-SoVITS with CUDA 12."
    echo "Using the default CUDA version provided by nixpkgs (likely 12.x)."
    echo "Make sure your NVIDIA driver is compatible with CUDA 12.x."
    echo "If you run into issues, try increasing the stack size:"
    echo "ulimit -s unlimited"
    # Set the locale.
    export LC_ALL="en_US.UTF-8"
    export LANG="en_US.UTF-8"
    export PYTHONIOENCODING="utf-8"

    if [ ! -d ".venv" ]; then
      echo "Creating Python virtual environment using Nix-provided Python..."
      ${pkgs.python312}/bin/python3.12 -m venv .venv
    else
      echo "Re-activating existing Python virtual environment..."
    fi
    source .venv/bin/activate
    echo "Virtual environment activated."

    # Unset PYTHONPATH
    unset PYTHONPATH
    echo "PYTHONPATH unset."

    # Install torch and torchaudio without explicit CUDA version first
    pip install torch torchaudio -f https://download.pytorch.org/whl/torch_stable.html

    # Install the rest of the requirements
    if [ -f "requirements.txt" ]; then
      echo "Installing Python dependencies from requirements.txt..."
      pip install -r requirements.txt
    else
      echo "No requirements.txt found. Make sure it's in the same directory as shell.nix, or that you've cloned the GPT-SoVITS repo."
    fi
    echo "Python environment setup complete."
    echo "You can now run GPT-SoVITS."
    echo " "
  '';

  # Minimal buildInputs for CUDA 12
  buildInputs = [
    pkgs.git
    pkgs.wget
    pkgs.ffmpeg-full
    pkgs.cmake
    pkgs.gcc
    pkgs.gnumake
    pkgs.coreutils
    pkgs.cacert # Certificate authority bundle
    pkgs.cudaPackages.cudatoolkit # Default CUDA (likely 12.x)
    pkgs.python312 # Ensure base python is available
    pythonPackages.setuptools
    pythonPackages.wheel
  ];

  # Libraries needed at runtime.  Include libstdc++ and zlib as per the video.
  LD_LIBRARY_PATH = with pkgs; lib.makeLibraryPath [
    pkgs.cudaPackages.cudatoolkit # Default CUDA (likely 12.x)
    pkgs.libstdcxx5
    pkgs.zlib
  ];
}
#+end_src
