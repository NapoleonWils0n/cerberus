#+STARTUP: content
* ffmpeg create clips from a vtt subtitles file

create clips for every sentence in a vtt subtitles file that ends with a period

** whipserx

create the vtt subtitles file with whisperx

#+begin_src sh
whisperx input.mp4 --device cuda --model small --language en --output_format vtt
#+end_src

** awk process the vtt subtitles file

process the vtt subtitles file with awk and create a csv file

*** extract-timestamps-from-vtt.awk

#+begin_src awk
#!/usr/bin/env awk -f

# This script processes a VTT file to extract start and end timestamps for sentences
# ending with a period, and outputs them to a CSV file.

# script usage
# awk -f extract-timestamps-from-vtt.awk input.vtt > cutlist.csv

# A BEGIN block is used to set the record and field separators.
# RS (Record Separator) is set to an empty string, which treats each blank-line-separated
# block of text in the VTT file as a single record.
# FS (Field Separator) is set to a newline character, so each line within a block
# is treated as a separate field ($1, $2, etc.).
BEGIN { RS = ""; FS = "\n" }

# A state variable to hold the start time of a sentence that spans multiple blocks.
# It is initialized to an empty string.
{
  # We first check if the first field ($1) contains the "-->" string, which indicates
  # a subtitle block with timestamps. We skip any non-subtitle blocks.
  if ($1 ~ /-->/) {
    # Extract the timestamp line and split it to get the start and end times of the block.
    split($1, times, " --> ")
    block_start_time = times[1]
    block_end_time = times[2]
    
    # Extract the text lines and join them into a single string.
    full_text = ""
    for (i = 2; i <= NF; i++) {
        full_text = full_text " " $i
    }
    
    # CRUCIAL FIX: Remove all ellipses (...) to avoid false sentence endings.
    gsub(/\.\.\./, "", full_text)

    # If this is the start of a new sentence, store the start time.
    if (start_time_of_sentence == "") {
      start_time_of_sentence = block_start_time
    }
    
    # Use a loop to handle sentences that might appear in the same subtitle block.
    while (match(full_text, /\./)) {
      # The sentence text is everything up to the first period.
      sentence_text = substr(full_text, 1, RSTART + RLENGTH - 1)
      
      # Since we don't have per-sentence timestamps within a block, the end time
      # of a sentence is the end time of the current block.
      end_time = block_end_time
      
      # Print the start and end times for the found sentence.
      print start_time_of_sentence "," end_time

      # Update the full_text buffer to remove the processed sentence.
      full_text = substr(full_text, RSTART + RLENGTH)
      
      # The next sentence starts where the last one ended.
      # The start time for the next sentence is the end time of the current block.
      start_time_of_sentence = block_end_time
    }
  }
}
#+end_src

*** run the extract-timestamps-from-vtt.awk script

#+begin_src sh
awk -f extract-timestamps-from-vtt.awk input.vtt > cutlist.csv
#+end_src

** ffmpeg use the csv file to create clips

*** scene-cut-to script

#+begin_src sh
#!/bin/sh

#===============================================================================
# scene-cut-to
# ffmpeg scene cut to position
#===============================================================================

# dependencies:
# ffmpeg 

#===============================================================================
# script usage
#===============================================================================

usage () {
# if argument passed to function echo it
[ -z "${1}" ] || echo "! ${1}"
# display help
echo "\
$(basename "$0") -i input -c cutfile

-i input.(mp4|mov|mkv|m4v)
-c cutfile"
exit 2
}


#===============================================================================
# error messages
#===============================================================================

INVALID_OPT_ERR='Invalid option:'
REQ_ARG_ERR='requires an argument'
WRONG_ARGS_ERR='wrong number of arguments passed to script'

#===============================================================================
# check the number of arguments passed to the script
#===============================================================================

[ $# -gt 0 ] || usage "${WRONG_ARGS_ERR}"


#===============================================================================
# getopts check the options passed to the script
#===============================================================================

while getopts ':i:c:h' opt
do
  case ${opt} in
     i) input="${OPTARG}";;
     c) cutfile="${OPTARG}";;
     h) usage;;
     \?) usage "${INVALID_OPT_ERR} ${OPTARG}" 1>&2;;
     :) usage "${INVALID_OPT_ERR} ${OPTARG} ${REQ_ARG_ERR}" 1>&2;;
  esac
done
shift $((OPTIND-1))


#===============================================================================
# variables
#===============================================================================

# get the input file name
input_nopath="${input##*/}"
input_name="${input_nopath%.*}"

#===============================================================================
# ffmpeg create clips - nostdin needed to avoid clash with read command
#===============================================================================

trim_video () {
    output="${input_name}-[${start}-${end}].mp4" 
    ffmpeg \
    -nostdin \
    -hide_banner \
    -stats -v panic \
    -ss "${start}" \
    -to "${end}" \
    -i "${input}" \
    -c:a aac \
    -c:v libx264 -profile:v high \
    -pix_fmt yuv420p -movflags +faststart \
    -f mp4 \
    "${output}"
}


#===============================================================================
# read file and set IFS=, read = input before , end = input after ,
#===============================================================================

count=1
while IFS=, read -r start end; do
  trim_video
done < "${cutfile}"
#+end_src

*** scene-cut-to usage

replace input with the video file to process and cutfile with the csv file

#+begin_src sh
scene-cut-to -i input -c cutfile
#+end_src
