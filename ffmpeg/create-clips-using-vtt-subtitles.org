#+STARTUP: content
* ffmpeg create clips from a vtt subtitles file

create clips for every sentence in a vtt subtitles file that ends with a period

** whipserx

create the vtt subtitles file with whisperx

#+begin_src sh
whisperx input.mp4 --device cuda --model small --language en --output_format vtt
#+end_src

** python

** ffmpeg use the csv file to create clips

*** scene-cut-to script

#+begin_src sh
#!/bin/sh

#===============================================================================
# scene-cut-to
# ffmpeg scene cut to position
#===============================================================================

# dependencies:
# ffmpeg 

#===============================================================================
# script usage
#===============================================================================

usage () {
# if argument passed to function echo it
[ -z "${1}" ] || echo "! ${1}"
# display help
echo "\
$(basename "$0") -i input -c cutfile

-i input.(mp4|mov|mkv|m4v)
-c cutfile"
exit 2
}


#===============================================================================
# error messages
#===============================================================================

INVALID_OPT_ERR='Invalid option:'
REQ_ARG_ERR='requires an argument'
WRONG_ARGS_ERR='wrong number of arguments passed to script'

#===============================================================================
# check the number of arguments passed to the script
#===============================================================================

[ $# -gt 0 ] || usage "${WRONG_ARGS_ERR}"


#===============================================================================
# getopts check the options passed to the script
#===============================================================================

while getopts ':i:c:h' opt
do
  case ${opt} in
     i) input="${OPTARG}";;
     c) cutfile="${OPTARG}";;
     h) usage;;
     \?) usage "${INVALID_OPT_ERR} ${OPTARG}" 1>&2;;
     :) usage "${INVALID_OPT_ERR} ${OPTARG} ${REQ_ARG_ERR}" 1>&2;;
  esac
done
shift $((OPTIND-1))


#===============================================================================
# variables
#===============================================================================

# get the input file name
input_nopath="${input##*/}"
input_name="${input_nopath%.*}"

#===============================================================================
# ffmpeg create clips - nostdin needed to avoid clash with read command
#===============================================================================

trim_video () {
    output="${input_name}-[${start}-${end}].mp4" 
    ffmpeg \
    -nostdin \
    -hide_banner \
    -stats -v panic \
    -ss "${start}" \
    -to "${end}" \
    -i "${input}" \
    -c:a aac \
    -c:v libx264 -profile:v high \
    -pix_fmt yuv420p -movflags +faststart \
    -f mp4 \
    "${output}"
}


#===============================================================================
# read file and set IFS=, read = input before , end = input after ,
#===============================================================================

count=1
while IFS=, read -r start end; do
  trim_video
done < "${cutfile}"
#+end_src

*** scene-cut-to usage

replace input with the video file to process and cutfile with the csv file

#+begin_src sh
scene-cut-to -i input -c cutfile
#+end_src
