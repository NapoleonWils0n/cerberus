#+STARTUP: content
* dwl freebsd install
** links

+ dwl codeberg

[[https://codeberg.org/dwl/dwl]]

+ patches wiki

[[https://codeberg.org/dwl/dwl-patches/wiki]]

+ movestack patch

[[https://codeberg.org/dwl/dwl-patches/wiki/movestack]]

** dependencies

dwl site dependencies list

#+begin_src sh
libinput
wayland
wlroots (compiled with the libinput backend)
xkbcommon
wayland-protocols (compile-time only)
pkg-config (compile-time only)
#+end_src

freebsd port depencies list

#+begin_example
Build dependencies:
        evdev-proto>0 : devel/evdev-proto
        wayland-protocols>0 : graphics/wayland-protocols
        gmake>=4.3 : devel/gmake
        pkgconf>=1.3.0_1 : devel/pkgconf
        xcb.pc : x11/libxcb
#+end_example

** packages install

#+begin_src sh
sudo pkg install seatd evdev-proto wayland-protocols gmake pkgconf libxcb libinput wayland wlroots libxkbcommon xcb-util-wm
#+end_src

** drivers
*** dell xps 15 2019

#+begin_SRC sh
sudo pkg install nvidia-driver nvidia-settings nvidia-drm-515-kmod libva-intel-driver libva-utils
#+END_SRC

we also need to edit /etc/rc.conf and add the path to the i915kms.ko file

#+begin_src sh
sudo sysrc kld_list+="i915kms nvidia-modeset nvidia-drm linux linux64"
#+end_src

or manually edit the config file

#+BEGIN_SRC sh
sudo vi /etc/rc.conf
#+END_SRC

then add the code below to /etc/rc.conf

#+BEGIN_SRC sh
kld_list="i915kms nvidia-modeset nvidia-drm linux linux64"
#+END_SRC

*** macbook air 2011 

#+begin_SRC sh
sudo pkg install libva-intel-driver libva-utils drm-515-kmod 
#+END_SRC

use libva-intel-driver and drm-515-kmod instead of xf86-video-intel for video hardware accleration

we also need to edit /etc/rc.conf and add the path to the i915kms.ko file

#+begin_src sh
sudo sysrc kld_list="i915kms"
#+end_src

or manually edit the config file

#+BEGIN_SRC sh
sudo vi /etc/rc.conf
#+END_SRC

then add the code below to /etc/rc.conf

#+BEGIN_SRC sh
kld_list="i915kms"
#+END_SRC

** wayland
*** create the xdg runtime directory, change the user and set the permissions

#+begin_src sh
sudo mkdir -p /var/run/user/1001
sudo chown -R djwilcox:wheel /var/run/user/1001
sudo chmod 700 /var/run/user/1001
#+end_src

*** set the runtime dir in the console

#+begin_src sh
export XDG_RUNTIME_DIR=/var/run/user/`id -u`
#+end_src

*** set the runtime dir in your zshrc config

#+begin_src sh
vi ~/.zshrc
#+end_src

export the XDG_RUNTIME_DIR

#+begin_src sh
export XDG_RUNTIME_DIR=/var/run/user/`id -u`
#+end_src

*** fstab

Add procfs to /etc/fstab with this line

#+begin_src sh
proc /proc procfs rw 0 0
#+end_src

The seatd daemon helps manage access to shared system devices for non-root users in compositors; this includes graphics cards. For traditional X11 managers, seatd is not needed, such as both Plasma and GNOME, but for the Wayland compositors discussed here, it will need enabled on the system and be running before starting a compositor environment. To enable and start the seatd daemon now, and on system initialization:

#+begin_src sh
sudo sysrc seatd_enable="YES"
sudo sysrc dbus_enable="YES"
#+end_src

[[https://docs.freebsd.org/en/books/handbook/wayland/]]

[[https://forums.freebsd.org/threads/example-tutorial-pure-wayland-desktop.85930/]]

[[https://forums.freebsd.org/threads/sway-and-wayland.83682/]]

** dwlb

dwlb dwl bar

[[https://github.com/kolunmi/dwlb]]

freebsd dwlb install

#+begin_src sh
sudo pkg install dwlb
#+end_src

** git clone dwl

[[https://codeberg.org/dwl/dwl]]

#+begin_src sh
git clone https://codeberg.org/dwl/dwl.git
#+end_src

** create git branch for customizations

Create a special branch where all the customizations will be kept. It doesn't matter what the name is, it just needs to be something different than master.

create a new git branch

#+BEGIN_SRC sh
git checkout -b patch
#+END_SRC

make edits and commit them one by one

** movestack 

[[https://codeberg.org/dwl/dwl-patches/src/branch/main/patches/movestack]]

#+begin_src sh
wget https://codeberg.org/dwl/dwl-patches/raw/branch/main/patches/movestack/movestack.patch
#+end_src

#+begin_src sh
patch -p1 < movestack.patch
#+end_src

** copy config.def.h to config.h

copy config.def.h to config.h

#+BEGIN_SRC sh
cp config.def.h config.h
#+END_SRC

** make file

#+begin_src sh
sed -i'' -e s/_POSIX_C_SOURCE=200809L/_XOPEN_SOURCE=700/ Makefile
#+end_src

** xwayland

edit config.mk and make sure xwayland is enabled

#+begin_src c
_VERSION = 0.5
VERSION  = `git describe --tags --dirty 2>/dev/null || echo $(_VERSION)`

PKG_CONFIG = pkg-config

# paths
PREFIX = /usr/local
MANDIR = $(PREFIX)/share/man
DATADIR = $(PREFIX)/share

#XWAYLAND =
#XLIBS =
# Uncomment to build XWayland support
XWAYLAND = -DXWAYLAND
XLIBS = xcb xcb-icccm
#+end_src

** dwl.c focus


dwl.c change line 606 from

#+begin_src c
case WLR_BUTTON_PRESSED:
#+end_src

to

#+begin_src c
case WL_POINTER_BUTTON_STATE_PRESSED:
#+end_src

change Line 627 from 

#+begin_src c
case WLR_BUTTON_RELEASED:
#+end_src

to

#+begin_src c
case WL_POINTER_BUTTON_STATE_RELEASED:
#+end_src

** keyboard set up

config.h

#+begin_src c
/* keyboard */
static const struct xkb_rule_names xkb_rules = {
	/* can specify fields: rules, model, layout, variant, options */
	/* example:
	.options = "ctrl:nocaps",
	,*/
	.layout = "gb",
	.model = "104",
	.options = "ctrl:swap_lalt_lctl,custom:swap_sterling_numbersign,caps:none",
	.rules = "evdev",
	.variant = "mac",
};
#+end_src

** modkey

set the modkey to the super key

#+begin_src c
/* If you want to use the windows key for MODKEY, use WLR_MODIFIER_LOGO */
#define MODKEY WLR_MODIFIER_LOGO
#+end_src

** terminal and launcher

#+begin_src c
/* commands */
static const char *termcmd[] = { "alacritty", NULL };
static const char *menucmd[] = { "tofi-drun", NULL };
#+end_src

** firefox and mpv

#+begin_src c
static const Rule rules[] = {
	/* app_id     title       tags mask     isfloating   monitor */
	/* examples:
	{ "Gimp",     NULL,       0,            1,           -1 },
	,*/
	{ "firefox",  NULL,       0,            0,           -1 },
	{ "mpv",  NULL,           0,            1,           0 },
};
#+end_src

** emacs and keyboard shortcuts

#+begin_src c
static const Key keys[] = {
	/* Note that Shift changes certain key codes: c -> C, 2 -> at, etc. */
	/* modifier                  key                 function        argument */
	{ MODKEY,                    XKB_KEY_a,          spawn,          {.v = menucmd} },
	{ MODKEY|WLR_MODIFIER_SHIFT, XKB_KEY_Return,     spawn,          {.v = termcmd} },
	{ MODKEY|WLR_MODIFIER_CTRL,  XKB_KEY_Return,     spawn,          SHCMD("emacsclient --alternate-editor= --create-frame") },
	{ MODKEY,                    XKB_KEY_j,          focusstack,     {.i = +1} },
	{ MODKEY,                    XKB_KEY_k,          focusstack,     {.i = -1} },
	{ MODKEY,                    XKB_KEY_i,          incnmaster,     {.i = +1} },
	{ MODKEY,                    XKB_KEY_d,          incnmaster,     {.i = -1} },
	{ MODKEY,                    XKB_KEY_h,          setmfact,       {.f = -0.05f} },
	{ MODKEY,                    XKB_KEY_l,          setmfact,       {.f = +0.05f} },
	{ MODKEY,                    XKB_KEY_Return,     zoom,           {0} },
	{ MODKEY,                    XKB_KEY_Tab,        view,           {0} },
	{ MODKEY|WLR_MODIFIER_SHIFT, XKB_KEY_C,          killclient,     {0} },
	{ MODKEY,                    XKB_KEY_t,          setlayout,      {.v = &layouts[0]} },
	{ MODKEY,                    XKB_KEY_f,          setlayout,      {.v = &layouts[1]} },
	{ MODKEY,                    XKB_KEY_m,          setlayout,      {.v = &layouts[2]} },
	{ MODKEY,                    XKB_KEY_space,      setlayout,      {0} },
	{ MODKEY|WLR_MODIFIER_SHIFT, XKB_KEY_space,      togglefloating, {0} },
	{ MODKEY,                    XKB_KEY_s,         togglefullscreen, {0} },
	{ MODKEY,                    XKB_KEY_0,          view,           {.ui = ~0} },
	{ MODKEY|WLR_MODIFIER_SHIFT, XKB_KEY_parenright, tag,            {.ui = ~0} },
	{ MODKEY,                    XKB_KEY_comma,      focusmon,       {.i = WLR_DIRECTION_LEFT} },
	{ MODKEY,                    XKB_KEY_period,     focusmon,       {.i = WLR_DIRECTION_RIGHT} },
	{ MODKEY|WLR_MODIFIER_SHIFT, XKB_KEY_less,       tagmon,         {.i = WLR_DIRECTION_LEFT} },
	{ MODKEY|WLR_MODIFIER_SHIFT, XKB_KEY_greater,    tagmon,         {.i = WLR_DIRECTION_RIGHT} },
	TAGKEYS(          XKB_KEY_1, XKB_KEY_exclam,                     0),
	TAGKEYS(          XKB_KEY_2, XKB_KEY_at,                         1),
	TAGKEYS(          XKB_KEY_3, XKB_KEY_numbersign,                 2),
	TAGKEYS(          XKB_KEY_4, XKB_KEY_dollar,                     3),
	TAGKEYS(          XKB_KEY_5, XKB_KEY_percent,                    4),
	TAGKEYS(          XKB_KEY_6, XKB_KEY_asciicircum,                5),
	TAGKEYS(          XKB_KEY_7, XKB_KEY_ampersand,                  6),
	TAGKEYS(          XKB_KEY_8, XKB_KEY_asterisk,                   7),
	TAGKEYS(          XKB_KEY_9, XKB_KEY_parenleft,                  8),
	{ MODKEY|WLR_MODIFIER_SHIFT, XKB_KEY_Q,          quit,           {0} },
#+end_src

** libinput scroll

#+begin_src c
/* You can choose between:
LIBINPUT_CONFIG_ACCEL_PROFILE_FLAT
LIBINPUT_CONFIG_ACCEL_PROFILE_ADAPTIVE
,*/
static const enum libinput_config_accel_profile accel_profile = LIBINPUT_CONFIG_ACCEL_PROFILE_FLAT;
static const double accel_speed = 1.0;
#+end_src

** media keys

config.h

#+begin_src c
/* commands */
static const char *volumeup[]      = { "/usr/sbin/mixer",   "vol=+5%:+5%",  NULL };
static const char *volumedown[]    = { "/usr/sbin/mixer",   "vol=-5%:-5%",  NULL };
static const char *mutevolume[]    = { "/usr/sbin/mixer",   "vol.mute=^",        NULL };

static const Key keys[] = {
	/* Note that Shift changes certain key codes: c -> C, 2 -> at, etc. */
	/* modifier                  key                 function        argument */

	{ 0,                         XKB_KEY_XF86AudioRaiseVolume, spawn, {.v = volumeup   } },
	{ 0,                         XKB_KEY_XF86AudioLowerVolume, spawn, {.v = volumedown } },
	{ 0,                         XKB_KEY_XF86AudioMute, spawn, {.v = mutevolume } },
#+end_src

** wlrctl cursor
*** wlrctl install

freebsd

#+begin_src sh
sudo pkg install wlrctl
#+end_src

*** config.h

#+begin_src c
/* commands */
static const char *cursorleft[]    = { "/usr/local/bin/wlrctl",   "pointer",  "move", "-1920",     NULL };
static const char *cursorright[]    = { "/usr/local/bin/wlrctl",   "pointer", "move", "1920",        NULL };

/* keys /
	{ MODKEY|WLR_MODIFIER_CTRL,  XKB_KEY_comma,      focusmon,       {.i = WLR_DIRECTION_LEFT} },
	{ MODKEY|WLR_MODIFIER_CTRL,  XKB_KEY_period,     focusmon,       {.i = WLR_DIRECTION_RIGHT} },
	{ MODKEY,                    XKB_KEY_comma,      spawn,          {.v = cursorleft} },
	{ MODKEY,                    XKB_KEY_period,     spawn,          {.v = cursorright} },
#+end_src

** merge changes into master branch

#+BEGIN_SRC sh
git checkout main
#+END_SRC

merge the patch branch into the master branch

#+BEGIN_SRC sh
git merge patch
#+END_SRC

** make dwl

change into the dwm directory

#+BEGIN_SRC sh
cd dwl
#+END_SRC

make for xwayland

#+begin_src sh
gmake CC=cc CFLAGS+='-std=c11' XWAYLAND="-DXWAYLAND" XLIBS="xcb xcb-icccm"
#+end_src

make without xwayland

#+begin_src sh
gmake CC=cc CFLAGS+='-std=c11'
#+end_src

https://forums.freebsd.org/threads/building-dwl-fails-with-c99-illegal-option-p.92040/

** dwl git update

If you some conflicts occur, resolve them and then record the changes and commit the result. git mergetool can help with resolving the conflicts.
Updating customizations after new release

When the time comes to update your customizations after a new release of dwm or when the dwm repository contains a commit fixing some bug, you first pull the new upstream changes into the master branch

#+BEGIN_SRC sh
git checkout origin
git pull
#+END_SRC

Then rebase your customization branch on top of the master branch

#+BEGIN_SRC sh
git checkout patch
git rebase --rebase-merges master
#+END_SRC

The --preserve-merges option ensures that you don't have to resolve conflicts which you have already resolved while performing merges again.

In case there are merge conflicts anyway, resolve them (possibly with the help of git mergetool), then record them as resolved and let the rebase continue

#+BEGIN_SRC sh
git add resolved_file.ext
git rebase --continue
#+END_SRC

If you want to give up, you can always abort the rebase

#+BEGIN_SRC sh
git rebase --abort
#+END_SRC

** apply diff patch

to apply the diff to the freshly checked out git repository

checkout the git repository

#+BEGIN_SRC sh
git clone git://git.suckless.org/dwm
#+END_SRC

create a new git branch

#+BEGIN_SRC sh
git checkout -b patch
#+END_SRC

+ apply the diff patch

#+BEGIN_SRC sh
git apply ~/Desktop/dwm-freebsd-patch.diff
#+END_SRC

checkout the master branch

#+BEGIN_SRC sh
git checkout master
#+END_SRC

merge the patch branch into the master branch

#+BEGIN_SRC sh
git merge patch
#+END_SRC

If you some conflicts occur, resolve them and then record the changes and commit the result. git mergetool can help with resolving the conflicts.
Updating customizations after new release

When the time comes to update your customizations after a new release of dwm or when the dwm repository contains a commit fixing some bug, you first pull the new upstream changes into the master branch

#+BEGIN_SRC sh
git checkout master
git pull
#+END_SRC

Then rebase your customization branch on top of the master branch

#+BEGIN_SRC sh
git checkout patch
git rebase --rebase-merges origin
#+END_SRC

The --preserve-merges option ensures that you don't have to resolve conflicts which you have already resolved while performing merges again.

In case there are merge conflicts anyway, resolve them (possibly with the help of git mergetool), then record them as resolved and let the rebase continue

#+BEGIN_SRC sh
git add resolved_file.ext
git rebase --continue
#+END_SRC

If you want to give up, you can always abort the rebase

#+BEGIN_SRC sh
git rebase --abort
#+END_SRC

** push branch to github

create a new repo on github and push the branches

#+begin_src sh
git remote add github git@github.com:NapoleonWils0n/dwl-freebsd.git
git branch -M main
git push -u github main
git push github patch
#+end_src
