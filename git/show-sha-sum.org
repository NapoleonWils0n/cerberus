#+STARTUP: showall
* git show sha sum
** current repo sha sum

show the sha sum in the current git repo 

#+begin_src sh
git rev-parse HEAD
#+end_src

** specify path to a local repo

pass in the git repo with the -C option and show the sha sum 

#+begin_src sh
git -C ~/git/cerberus rev-parse HEAD
#+end_src

** remote git repo sha sum

show the sha sum for a remote git repo

#+begin_src sh
git ls-remote https://github.com/NapoleonWils0n/cerberus HEAD
#+end_src

** remote name

use the remote name of a local git repo

#+begin_src sh
git remote -v
#+end_src

#+begin_example
github  git@github.com:NapoleonWils0n/cerberus.git (fetch)
github  git@github.com:NapoleonWils0n/cerberus.git (push)
#+end_example

git remote show -n will show the cached local name

#+begin_src sh
git remote show -n
#+end_src

#+begin_example
github
#+end_example

get the sha sum of the remote git repo using the cached remote name

#+begin_src sh
git ls-remote github HEAD
#+end_src

** lrsha script

run the lrsha script inside a git repo

#+begin_src sh
lrhsa
#+end_src

run the lrsha script
and us the -c option and the path to a git repo

#+begin_src sh
lrsha -c ~/git/git-repo
#+end_src

#+begin_src sh
#!/bin/sh

#===============================================================================
# lrsha
# compare local and remote git sha sums
#===============================================================================

# dependencies:
# git awk


#===============================================================================
# script usage
#===============================================================================

usage () {
# if argument passed to function echo it
[ -z "${1}" ] || echo "! ${1}"
# display help
echo "\
$(basename "$0") -c path-to-git-repo
-c path-to-git-repo : optional"
exit 2
}


#===============================================================================
# error messages
#===============================================================================

INVALID_OPT_ERR='Invalid option:'
REQ_ARG_ERR='requires an argument'
WRONG_ARGS_ERR='wrong number of arguments passed to script'


#===============================================================================
# check the number of arguments passed to the script
#===============================================================================

#[ $# -gt 1 ] || usage "${WRONG_ARGS_ERR}"


#===============================================================================
# getopts check the options passed to the script
#===============================================================================

while getopts ':c:h' opt
do
  case ${opt} in
     c) path="git -C ${OPTARG}";;
     h) usage;;
     \?) usage "${INVALID_OPT_ERR} ${OPTARG}" 1>&2;;
     :) usage "${INVALID_OPT_ERR} ${OPTARG} ${REQ_ARG_ERR}" 1>&2;;
  esac
done
shift $((OPTIND-1))


#===============================================================================
# variables
#===============================================================================

# get the git remote cached name
remote_name=$(${path:=git} remote show -n)

# get the local git repo sha sum
local_sha=$(${path:=git} rev-parse HEAD)

# get the git remote sha sum using the cached remote name
remote_sha=$(${path:=git} ls-remote ${remote_name} HEAD | awk '{print $1}')


#===============================================================================
# compare the local and remote git sha sums
#===============================================================================

gitcompare () {
if [ "${local_sha}" == "${remote_sha}" ]; then
  echo  "Local and remote sha sums match
${local_sha} #local
${remote_sha} #remote"
else
  echo "Local and remote sha sums differ
${local_sha} #local
${remote_sha} #remote"
fi
}

#===============================================================================
# run function
#===============================================================================

gitcompare
#+end_src
