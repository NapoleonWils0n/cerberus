#+STARTUP: content
* index-tss nixos
** resources

[[https://github.com/index-tts/index-tts]]

** git clone

create the nix directory

#+begin_src sh
mkdir -p ~/nix/index-tts
#+end_src

and then change directory into the index-tts directory

#+begin_src sh
cd ~/nix/index-tts
#+end_src

git clone the index-tts repository

#+begin_src sh
git clone https://github.com/index-tts/index-tts.git
#+end_src

this will clone the repo to

#+begin_src sh
~/nix/index-tts/index-tts
#+end_src

** flake.nix

create the flake.nix in this location

#+begin_src sh
vi ~/nix/index-tts/flake.nix
#+end_src

#+begin_src nix
{
  description = "A development shell for OpenAI Whisper with CUDA support.";

  inputs = {
    # Pinning to the latest stable NixOS release for better CUDA stability
    nixpkgs.url = "github:NixOS/Nixpkgs/nixos-25.05"; # <--- CHANGED: Pin to stable channel 25.05
    flake-utils.url = "github:numtide/flake-utils";
  };

  outputs = { self, nixpkgs, flake-utils }:
    flake-utils.lib.eachDefaultSystem (system:
      let
        pkgs = import nixpkgs {
          inherit system;
          config = {
            allowUnfree = true; # Necessary for NVIDIA drivers and CUDA
          };
        };
      in
      {
        devShells.default = pkgs.mkShell rec {
          name = "index-tts";

          # Essential build inputs for CUDA and Python environment
          buildInputs = with pkgs; [
            ffmpeg-full
            python311
            stdenv.cc.cc.lib
            stdenv.cc
            cudaPackages.cudatoolkit # Using the general cudatoolkit from the stable channel
            linuxPackages.nvidia_x11 # Host NVIDIA X11 drivers
            zlib
          ];

          # Environment variables required for CUDA and library linking
          LD_LIBRARY_PATH = pkgs.lib.makeLibraryPath buildInputs;
          CUDA_PATH = pkgs.cudaPackages.cudatoolkit;
          CUDA_HOME = pkgs.cudaPackages.cudatoolkit;
          EXTRA_LDFLAGS = "-L${pkgs.linuxPackages.nvidia_x11}/lib";

          # Ensure CUDA binaries (like nvidia-smi) are in PATH for diagnostics
          PATH = pkgs.lib.makeBinPath [
            pkgs.cudaPackages.cudatoolkit
          ];

          # Shell hook to set up the Python virtual environment and install dependencies
          shellHook = ''
            echo "Setting up environment for indextts with CUDA..."

            export LC_ALL="en_US.UTF-8"
            export LANG="en_US.UTF-8"
            export PYTHONIOENCODING="utf-8"

            if [ ! -d ".venv" ]; then
              echo "Creating Python virtual environment..."
              ${pkgs.python311}/bin/python3.11 -m venv .venv
            else
              echo "Re-activating existing Python virtual environment..."
            fi
            source .venv/bin/activate
            echo "Virtual environment activated."

            export CUDA_VISIBLE_DEVICES=0
            export XDG_CACHE_HOME="$HOME/.cache"

            pip install --upgrade pip

            echo "Installing torch and torchaudio for CUDA 12.1..."
            pip install torch torchaudio --index-url https://download.pytorch.org/whl/cu121

            # install index-tts
            pip install -r ./index-tts/requirements.txt
            pip install -e ./index-tts/.

            echo "index-tts setup complete."
          '';
        };
      });
}
#+end_src

create the flake.lock in this location

#+begin_src sh
vi ~/nix/index-tts/flake.lock
#+end_src

#+begin_src nix
{
  "nodes": {
    "flake-utils": {
      "inputs": {
        "systems": "systems"
      },
      "locked": {
        "lastModified": 1731533236,
        "narHash": "sha256-l0KFg5HjrsfsO/JpG+r7fRrqm12kzFHyUHqHCVpMMbI=",
        "owner": "numtide",
        "repo": "flake-utils",
        "rev": "11707dc2f618dd54ca8739b309ec4fc024de578b",
        "type": "github"
      },
      "original": {
        "owner": "numtide",
        "repo": "flake-utils",
        "type": "github"
      }
    },
    "nixpkgs": {
      "locked": {
        "lastModified": 1750969886,
        "narHash": "sha256-zW/OFnotiz/ndPFdebpo3X0CrbVNf22n4DjN2vxlb58=",
        "owner": "NixOS",
        "repo": "Nixpkgs",
        "rev": "a676066377a2fe7457369dd37c31fd2263b662f4",
        "type": "github"
      },
      "original": {
        "owner": "NixOS",
        "ref": "nixos-25.05",
        "repo": "Nixpkgs",
        "type": "github"
      }
    },
    "root": {
      "inputs": {
        "flake-utils": "flake-utils",
        "nixpkgs": "nixpkgs"
      }
    },
    "systems": {
      "locked": {
        "lastModified": 1681028828,
        "narHash": "sha256-Vy1rq5AaRuLzOxct8nz4T6wlgyUR7zLU309k9mBC768=",
        "owner": "nix-systems",
        "repo": "default",
        "rev": "da67096a3b9bf56a91d16901293e51ba5b49a27e",
        "type": "github"
      },
      "original": {
        "owner": "nix-systems",
        "repo": "default",
        "type": "github"
      }
    }
  },
  "root": "root",
  "version": 7
}

#+end_src

run nix develop

#+begin_src sh
nix develop
#+end_src

#+begin_src sh
nix flake update
#+end_src

** download models

you may need to remove the existing checkpoints/config.yaml file first

#+begin_src sh
rm -i checkpoints/config.yaml
#+end_src

#+begin_src sh
wget -c https://huggingface.co/IndexTeam/IndexTTS-1.5/resolve/main/bigvgan_discriminator.pth -P checkpoints
wget -c https://huggingface.co/IndexTeam/IndexTTS-1.5/resolve/main/bigvgan_generator.pth -P checkpoints
wget -c https://huggingface.co/IndexTeam/IndexTTS-1.5/resolve/main/bpe.model -P checkpoints
wget -c https://huggingface.co/IndexTeam/IndexTTS-1.5/resolve/main/dvae.pth -P checkpoints
wget -c https://huggingface.co/IndexTeam/IndexTTS-1.5/resolve/main/gpt.pth -P checkpoints
wget -c https://huggingface.co/IndexTeam/IndexTTS-1.5/resolve/main/unigram_12000.vocab -P checkpoints
wget -c https://huggingface.co/IndexTeam/IndexTTS-1.5/resolve/main/config.yaml -P checkpoints
#+end_src

** usage

#+begin_src sh
indextts "hello this is index-tts" \
--device cuda \
--voice ~/Desktop/input.wav \
--model_dir ~/nix/index-tts/index-tts/checkpoints \
--config ~/nix/index-tts/index-tts/checkpoints/config.yaml \
--output ~/Desktop/output.wav
#+end_src

** ffmpeg resample audio

#+begin_src sh
ffmpeg -i input.wav -ar 48000 output.wav
#+end_src

** batch resample audio

batch resample audio to 48000 khz

#+begin_src sh
#!/bin/sh

find . -maxdepth 1 -name "*.wav" -print0 | xargs -0 -I {} sh -c '
  input="{}"
  base="${input%.wav}"
  output="${base}-resampled.wav"
  ffmpeg -i "$input" -ar 48000 "$output"
'
#+end_src
