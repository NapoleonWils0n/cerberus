#+STARTUP: content
* pw-record

pipewire record desktop audio

** wpctl status

#+begin_src sh
wpctl status
#+end_src

#+begin_example
PipeWire 'pipewire-0' [1.2.7, djwilcox@pollux, cookie:2159314335]
 └─ Clients:
        34. .gnome-shell-wrapped                [1.2.7, djwilcox@pollux, pid:2501]
        35. WirePlumber                         [1.2.7, djwilcox@pollux, pid:2918]
        36. pipewire                            [1.2.7, djwilcox@pollux, pid:2921]
        37. GNOME Shell Volume Control          [1.2.7, djwilcox@pollux, pid:2501]
        38. GNOME Volume Control Media Keys     [1.2.7, djwilcox@pollux, pid:2674]
        51. WirePlumber [export]                [1.2.7, djwilcox@pollux, pid:2918]
        65. .xdg-desktop-portal-wrapped         [1.2.7, djwilcox@pollux, pid:3064]
        69. Firefox                             [1.2.7, djwilcox@pollux, pid:49784]
        74. wpctl                               [1.2.7, djwilcox@pollux, pid:274498]

Audio
 ├─ Devices:
 │      52. Built-in Audio                      [alsa]
 │
 ├─ Sinks:
 │  *   59. Built-in Audio Analog Stereo        [vol: 0.35]
 │
 ├─ Sources:
 │  *   60. Built-in Audio Analog Stereo        [vol: 1.00]
 │
 ├─ Filters:
 │
 └─ Streams:
        75. Firefox
             70. output_FL       > ALC3266 Analog:playback_FL   [active]
             71. output_FR       > ALC3266 Analog:playback_FR   [active]

Video
 ├─ Devices:
 │      39. Integrated_Webcam_HD                [v4l2]
 │      48. Integrated_Webcam_HD: Integrate     [libcamera]
 │      50. Integrated_Webcam_HD                [v4l2]
 │
 ├─ Sinks:
 │
 ├─ Sources:
 │  *   66. Integrated_Webcam_HD (V4L2)
 │
 ├─ Filters:
 │
 └─ Streams:

Settings
 └─ Default Configured Devices:
         0. Audio/Sink    alsa_output.pci-0000_00_1f.3.analog-stereo
#+end_example

** pw-record

record default sink

#+begin_src sh
pw-record -P '{ stream.capture.sink=true }' output.wav
#+end_src

verbose output

#+begin_src sh
pw-record -vP '{ stream.capture.sink=true }' output.wav
#+end_src

record audio from Firefox

#+begin_src sh
pw-record --target Firefox out.wav
#+end_src

verbose output

#+begin_src sh
pw-record -v --target Firefox out.wav
#+end_src

** record-pipewire script

#+begin_src sh
#!/bin/sh

#===============================================================================
# record-pipewire
# record pipewire audio with pw-record
#===============================================================================

# dependencies:
# pipewire

#===============================================================================
# script usage
#===============================================================================

usage () {
# if argument passed to function echo it
[ -z "${1}" ] || echo "! ${1}"
# display help
echo "\
# record pipewire audio with pw-record
$(basename "$0") -o output.(wav|flac)
-o output.(wav|flac) : optional argument"
exit 2
}


#===============================================================================
# error messages
#===============================================================================

INVALID_OPT_ERR='Invalid option:'
REQ_ARG_ERR='requires an argument'
WRONG_ARGS_ERR='wrong number of arguments passed to script'


#===============================================================================
# getopts check the options passed to the script
#===============================================================================

while getopts ':o:h' opt
do
  case ${opt} in
     h) usage;;
     o) output="${OPTARG}";;
     \?) usage "${INVALID_OPT_ERR} ${OPTARG}" 1>&2;;
     :) usage "${INVALID_OPT_ERR} ${OPTARG} ${REQ_ARG_ERR}" 1>&2;;
  esac
done
shift $((OPTIND-1))


#===============================================================================
# variables
#===============================================================================

output_default="pipewire-$(date +"%Y-%m-%d-%H-%M-%S").wav"


#===============================================================================
# function
#===============================================================================

pwrec () {
  pw-record -P '{ stream.capture.sink=true }' "${output:=${output_default}}"
}


#===============================================================================
# run function
#===============================================================================

pwrec
#+end_src

** zsh completions

edit your zshrc file

#+begin_src sh
vi ~/.zshrc
#+end_src

add the following code for completions for the pipewire commands

#+begin_src conf
# pipewire commands completions
compdef _gnu_generic pw-cat
compdef _gnu_generic pw-cli
compdef _gnu_generic pw-config
compdef _gnu_generic pw-container
compdef _gnu_generic pw-dot
compdef _gnu_generic pw-dsdplay
compdef _gnu_generic pw-dump
compdef _gnu_generic pw-encplay
compdef _gnu_generic pw-link
compdef _gnu_generic pw-loopback
compdef _gnu_generic pw-metadata
compdef _gnu_generic pw-mididump
compdef _gnu_generic pw-midiplay
compdef _gnu_generic pw-midirecord
compdef _gnu_generic pw-mon
compdef _gnu_generic pw-play
compdef _gnu_generic pw-profiler
compdef _gnu_generic pw-record
compdef _gnu_generic pw-reverse
compdef _gnu_generic pw-top
compdef _gnu_generic pw-v4l2
#+end_src

source your ~/.zshrc to pick up the new commands

#+begin_src sh
source ~/.zshrc
#+end_src
