#+STARTUP: content
#+OPTIONS: num:nil
#+OPTIONS: author:nil
* Freebsd macbook install


+ Download iso file
+ Burn to disc
+ Insert disc restart mac and hold down alt to boot into efi mode


+ [[freebsd dotfiles][https://github.com/NapoleonWils0n/freebsd-dotfiles]]
+ [[freebsd root dotfiles][https://github.com/NapoleonWils0n/freebsd-root]]
+ [[freebsd home bin][https://github.com/NapoleonWils0n/freebsd-bin]]

** download freebsd 

download the memstick.img.xz to install on a usb stick

#+begin_src sh
wget https://download.freebsd.org/releases/amd64/amd64/ISO-IMAGES/13.2/FreeBSD-13.2-RELEASE-amd64-memstick.img.xz
#+end_src

download the checksum

#+begin_src sh
wget https://download.freebsd.org/releases/amd64/amd64/ISO-IMAGES/13.2/CHECKSUM.SHA512-FreeBSD-13.2-RELEASE-amd64
#+end_src

Verify the checksum 

#+begin_src sh
sha512sum -c CHECKSUM.SHA512-FreeBSD-13.2-RELEASE-amd64 FreeBSD-13.2-RELEASE-amd64-memstick.img.xz
#+end_src

** writing an image file to usb

#+begin_src sh
xz -dv FreeBSD-13.2-RELEASE-amd64-memstick.img.xz
#+end_src

#+begin_src sh
sudo dd if=FreeBSD-13.1-RELEASE-amd64-memstick.img of=/dev/sda bs=1M conv=sync
#+end_src

** root on zfs

Select root on zfs during in

+ encrypt discs
+ encrypt swap
+ swap size 8gig

freebsd installer partition scheme
for apple hardware choose gpt (bios+uefi)

** set the root password

set the root password

** change settings to insecure

#+BEGIN_SRC sh
console none unknown off insecure
#+END_SRC

** bootstrap the system

To bootstrap the system, run:

#+BEGIN_SRC sh
# /usr/sbin/pkg
#+END_SRC

** sudo

install sudo 

#+BEGIN_SRC sh
# pkg install sudo
#+END_SRC

edit /etc/sudoers

#+BEGIN_SRC sh
# visudo
#+END_SRC

add your user to the sudoers file, replace username with your username

#+BEGIN_SRC sh
username   ALL=(ALL:ALL) ALL
#+END_SRC

** create new user

create new user

#+BEGIN_SRC sh
adduser
#+END_SRC

** add new user to wheel and video groups

single user mode require root password

change single user mode to requite root password
change setting from secure to insecure to require root password

edit /etc/ttys

#+BEGIN_SRC sh
sudo nano /etc/ttys
#+END_SRC

** xorg

instal xorg

#+BEGIN_SRC sh
sudo pkg install xorg xinit xf86-input-keyboard xf86-input-mouse xf86-input-synaptics \
libva-intel-driver libva-utils drm-510-kmod 
#+END_SRC

+ use libva-intel-driver and drm-510-kmod instead of xf86-video-intel for video hardware accleration

we also need to edit /etc/rc.conf and add the path to the i915kms.ko file

#+BEGIN_SRC sh
sudo vim /etc/rc.conf
#+END_SRC

then add the code below to /etc/rc.conf

new

#+BEGIN_SRC sh
kld_list="i915kms"
#+END_SRC

old

#+BEGIN_SRC sh
kld_list="/boot/modules/i915kms.ko"
#+END_SRC



add freetype to modules, and filepath to dejavu in xorg.conf

Generating an xorg.conf:

#+BEGIN_SRC sh
# Xorg -configure
#+END_SRC

location of new file

#+BEGIN_SRC sh
/root/xorg.conf.new
#+END_SRC

add the follwoing to the Modules of x config file

#+BEGIN_SRC sh
Load "freetype"
#+END_SRC

add following to Files section of x config

#+BEGIN_SRC sh
FontPath "/usr/local/share/fonts/dejavu/"
FontPath "/usr/local/share/fonts/urwfonts/"
FontPath "/usr/local/share/fonts/powerline-fonts/"
#+END_SRC

** wayland

It has been reported that ZFS users may experience issues with some Wayland clients because they need access to posix_fallocate() in the runtime directory. While the author could not reproduce this issue on their ZFS system, a recommended workaround is not to use ZFS for the runtime directory and instead use tmpfs for the /var/run directory. In this case, the tmpfs file system is used for /var/run and mounted through the command mount -t tmpfs tmpfs /var/run command and then make this change persist across reboots through /etc/fstab. The XDG_RUNTIME_DIR environment variable could be configured to use /var/run/user/$UID and avoid potential pitfalls with ZFS. Consider that scenario when reviewing the configuration examples in the following sections.

#+begin_src sh
sudo pkg install wayland seatd
#+end_src

#+begin_src sh
sudo mkdir -p /var/run/user/1001
sudo chown -R djwilcox:wheel /var/run/user/1001
sudo chmod 700 /var/run/user/1001
#+end_src

set the runtime dir

#+begin_src sh
export XDG_RUNTIME_DIR=/var/run/user/`id -u`
#+end_src

fstab

Add tmpfs and procfs to /etc/fstab with this line

#+begin_src sh
tmpfs /var/run tmpfs rw 0 0
proc /proc procfs rw 0 0
#+end_src

The seatd daemon helps manage access to shared system devices for non-root users in compositors; this includes graphics cards. For traditional X11 managers, seatd is not needed, such as both Plasma and GNOME, but for the Wayland compositors discussed here, it will need enabled on the system and be running before starting a compositor environment. To enable and start the seatd daemon now, and on system initialization:

#+begin_src sh
sudo sysrc seatd_enable=”YES”
sudo sysrc dbus_enable=YES
#+end_src

[[https://docs.freebsd.org/en/books/handbook/wayland/]]

[[https://forums.freebsd.org/threads/example-tutorial-pure-wayland-desktop.85930/]]

[[https://forums.freebsd.org/threads/sway-and-wayland.83682/]]

** kde

[[https://www.youtube.com/watch?v=XjPha2bWvxs]]

[[https://www.reddit.com/r/freebsd/comments/w16pyo/kde_sddm/]]

[[https://community.kde.org/FreeBSD/Setup]]

[[https://euroquis.nl//kde/2021/04/30/wayland.html]]

#+begin_src sh
sudo pkg install plasma5-plasma plasma5-sddm-kcm
#+end_src

To increase messages size execute:

#+begin_src sh
sudo sysctl net.local.stream.recvspace=65536
sudo sysctl net.local.stream.sendspace=65536
#+end_src

The preferred KDE Plasma display manager is x11/sddm. To install x11/sddm, execute:

#+begin_src sh
sudo pkg install sddm
#+end_src

Enable SDDM service in /etc/rc.conf to start at system boot:

#+begin_src sh
sudo sysrc sddm_enable="YES"
#+end_src

to have smartd start at boot

#+begin_src sh
echo 'smartd_enable="YES"' >> /etc/rc.conf
#+end_src

gstreamer

#+begin_src sh
sudo pkg install multimedia/gstreamer1-plugins-all
#+end_src

You will need:

    FreeBSD 13 or later. I’m not going to look at 12-or-older compatibility.
    Intel i915kms graphics. I’m not going to look at AMD compatibility, or nVidia for the time being.
    No display manager. service sddm stop will do for now.
    The sufficiently-new packages for plasma-workspace and kwin installed.

To run it:

    Boot to a text console,
    Log in as a regular user,
    Run /usr/local/bin/startplasma-wayland.sh.

** wayfire

#+begin_src sh
sudo pkg install wayfire wf-shell alacritty swaylock-effects swayidle wlogout kanshi mako wlsunset wcm
#+end_src

config

#+begin_src sh
mkdir ~/.config/wayfire
cp /usr/local/share/examples/wayfire/wayfire.ini ~/.config/wayfire
#+end_src

test config

#+begin_src sh
wayfire -c ~/.config/wayfire/wayfire.ini
#+end_src

other package
wcm
wayfire-plugins-extra

HiDPI settings

#+begin_src sh
[core]
xwayland_scale = 2
[autostart]
xsettingsd = xsettingsd
#+end_src

** install zsh

install zsh

#+BEGIN_SRC sh
sudo pkg install zsh zsh-completions zsh-syntax-highlighting
#+END_SRC

change the shell to bash

#+BEGIN_SRC sh
chsh -s /usr/local/bin/zsh
#+END_SRC

add to your ~/.zshrc

#+begin_src sh
source /usr/local/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
#+end_src

** ports

To download a compressed snapshot of the Ports Collection into /var/db/portsnap:

#+BEGIN_SRC sh
# portsnap fetch
#+END_SRC

2 When running Portsnap for the first time, extract the snapshot into /usr/ports:

#+BEGIN_SRC sh
# portsnap extract
#+END_SRC

3 After the first use of Portsnap has been completed as shown above, /usr/ports can be updated as needed by running:

#+BEGIN_SRC sh
# portsnap fetch update
#+END_SRC

** fonts

install truetype fonts

#+BEGIN_SRC sh
# pkg install urwfonts powerline-fonts
#+END_SRC

** i3wm tiling window manager

install i3wm

#+BEGIN_SRC sh
sudo pkg install -y i3 i3lock i3status rofi
#+END_SRC

copy default xinitrc to ~/.xinitrx

#+BEGIN_SRC sh
cp /usr/local/etc/X11/xinit/xinitrc ~/.xinitrc
#+END_SRC

edit ~/.xinitrc

#+BEGIN_SRC sh
vi ~/.xinitrc
#+END_SRC

#+BEGIN_SRC sh
exec /usr/local/bin/i3
#+END_SRC

** applications

+ xkbcomp set keyboard

#+BEGIN_SRC sh
sudo pkg install xkbcomp
#+END_SRC

+ urxvt-unicode terminal

#+BEGIN_SRC sh
sudo pkg install rxvt-unicode urxvt-perls
#+END_SRC

## dotfiles

freebsd dot files

## /etc/rc.conf

edit /etc/rc.conf  

use moused_enable="YES" and moused_port="wsp0" for mac touchpad

```
clear_tmp_enable="YES"
syslogd_flags="-ss"
sendmail_enable="NONE"
hostname="pollux"
#ifconfig_bge0="DHCP"
ifconfig_ue0="DHCP"
local_unbound_enable="YES"
moused_port="wsp0"
moused_enable="YES"
ntpd_enable="YES"
ntpd_flags="-g"
# performance
powerd_enable="YES"
powerd_flags="-a hiadaptive -b adaptive"
performance_cx_lowest="Cmax"
economy_cx_lowest="Cmax"
# Set dumpdev to "AUTO" to enable crash dumps, "NO" to disable
dumpdev="AUTO"
zfs_enable="YES"
pf_enable="YES"
nfs_client_enable="YES"
hald_enable="YES"
dbus_enable="YES"
#devfs_system_ruleset="localrules"
# hardware accleration
kld_list="/boot/modules/i915kms.ko"
```

## /etc/sysctl.conf

edit /etc/sysctl.conf

```
# $FreeBSD: releng/12.0/sbin/sysctl/sysctl.conf 337624 2018-08-11 13:28:03Z brd $
#
#  This file is read when going to multi-user and its contents piped thru
#  ``sysctl'' to adjust kernel values.  ``man 5 sysctl.conf'' for details.
#

# Uncomment this to prevent users from seeing information about processes that
# are being run under another UID.
#security.bsd.see_other_uids=0
security.bsd.see_other_uids=0
security.bsd.see_other_gids=0
security.bsd.see_jail_proc=0
security.bsd.unprivileged_read_msgbuf=0
security.bsd.unprivileged_proc_debug=0
kern.randompid=1
vfs.zfs.min_auto_ashift=12
# disable pc speaker
hw.syscons.bell=0
# allow users to mount drives
# vfs.usermount=1
# automatically use new audio devices
hw.snd.default_auto=1
# sleep resume
hw.acpi.lid_switch_state=s3
# bit perfect audio
hw.snd.default_unit=2
dev.pcm.2.play.vchans=0
dev.pcm.2.bitperfect=1
```

## /etc/pf.conf

pf firewall

```
#=========================================================================#
# variables, macro and tables                                             #
#=========================================================================#

int_if="ue0" # usb to ethernet adaptor
#int_if="bge0" # thunderbolt to ethernet adaptor
vpn_if="tun0" # vpn interface
all_networks="0.0.0.0/0"
vpn_network="$vpn_if:network"
tcp_services = "{ ntp, 6881, 22000 }" # tcp services
udp_services = "{ ntp, 6882, 21025 }" # udp services
icmp_types = "{ echoreq, unreach }"
tcp_state="flags S/SA keep state"
udp_state="keep state"

#table <internet> { $all_networks, !self, !$int_if:network } # internet
#table <lan> { $int_if:network, !self }                      # lan network
table <myself> { self }                                     # self
table <martians> { 0.0.0.0/8 10.0.0.0/8 127.0.0.0/8 169.254.0.0/16     \
	 	   172.16.0.0/12 192.0.0.0/24 192.0.2.0/24 224.0.0.0/3 \
	 	   192.168.0.0/16 198.18.0.0/15 198.51.100.0/24        \
	 	   203.0.113.0/24 }                         # broken networks

#=========================================================================#
# global policy                                                           #
#=========================================================================#

set block-policy drop
set loginterface $int_if
set fingerprints "/etc/pf.os"
set skip on lo0
scrub in all fragment reassemble no-df max-mss 1440
antispoof log quick for { lo $int_if } label "block_spoofing"

#=========================================================================#
# block                                                                   #
#=========================================================================#

block log all # block log all
block return out quick inet6 all tag IPV6 # block ipv6 
block in quick inet6 all tag IPV6 # block ipv6

# block broken networks
block in quick from { <martians> no-route urpf-failed } to any tag BAD_PACKET

#=========================================================================#
# anchors                                                                 #
#=========================================================================#

# emerging threats - anchor
anchor "emerging-threats"
load anchor "emerging-threats" from "/etc/pf.anchors/emerging-threats"

# openvpn - anchor
anchor "openvpn"

#=========================================================================#
# traffic tag                                                             #
#=========================================================================#

# icmp
pass inet proto icmp all icmp-type $icmp_types keep state tag ICMP

# Allow the tcp and udp services defined in the macros at the top of the file
pass in on $int_if inet proto tcp from any to ($int_if) port $tcp_services $tcp_state tag TCP_IN
pass in on $int_if inet proto udp from any to ($int_if) port $udp_services $udp_state tag UDP_IN

# outbound traffic
block out on $int_if all
pass out quick on $int_if all modulate state
#pass out quick on $int_if from <myself> to <lan> modulate state tag LAN_OUT
#pass out quick on $int_if from <myself> to <internet> modulate state tag INTERNET_OUT
```

reload pf firewall

```
# pfctl -f /etc/pf.conf
```

## /boot/loader.conf

edit /boot/loader.conf

```
# vi /boot/loader.conf
```

use wsp_load="YES" for mac touchpad  
add the following code

```
aesni_load="YES"
geom_eli_load="YES"
security.bsd.allow_destructive_dtrace=0
kern.geom.label.disk_ident.enable="0"
kern.geom.label.gptid.enable="0"
zfs_load="YES"
snd_hda_load="YES"
snd_uaudio_load="YES"
# fibs
net.fibs=2
net.add_addr_allfibs=0
asmc_load="YES"
acpi_video_load="YES"
hint.p4tcc.0.disabled="1"
hint.acpi_throttle.0.disabled="1"
# enable CPU temperature monitoring
coretemp_load="YES"
# driver for touchpad
wsp_load="YES"
```


## pandoc

```
sudo pkg install hs-pandoc hs-pandoc-citeproc
```

## openvpn

```
sudo pkg install openvpn
```

## mount ext4 as read only
	
add user to operator group

```
sudo pw groupmod operator -m djwilcox
```

Edit /etc/devfs.rules to allow the operator group to be able to read and write the device:

```
sudo vim /etc/devfs.rules
```

/etc/devfs.rules


```
[localrules=5]
add path 'da*' mode 0660 group operator
```

Then edit /etc/rc.conf to enable the devfs.rules(5) ruleset:

```
sudo vi /etc/rc.conf
```

```
devfs_system_ruleset="localrules"
```

Next allow regular user to mount file system:

```
sudo vi /etc/sysctl.conf
```

```
vfs.usermount=1
```

Also execute sysctl to make the update available now:

```
sudo sysctl vfs.usermount=1
```

```
vfs.usermount: 0 -> 1
```

Create a directory which a regular use can mount to:

```
sudo mkdir /mnt/usb
```

change the permission so your user own the directory with chown
replace username with your username

```
sudo chown username:username /mnt/usb
```

install ext4 fuse

```
sudo pkg install fusefs-ext4fuse
```

Lastly, edit /boot/loader.conf to load the module each boot:

```
sudo vim /boot/loader.conf
```

```
fuse_load="YES"
fusefs_load="YES"
```

Now mounting USB drive with ext4 filesystem is working!

```
ext4fuse /dev/da0s1 /mnt/usb
```

# gpg
To export your secret keys, use:
  gpg --export-secret-key -a > secret.key

and to import them again:
  gpg --import secret.key

## freebsd dbus

```
sudo dbus-uuidgen > /etc/machine-id
```

# freebsd dhclient

avoid overwriting /etc/resolv.conf

** edit /etc/dhclient-enter-hooks

#+BEGIN_SRC sh
sudo vim /etc/dhclient-enter-hooks
#+END_SRC

add the following to /etc/dhclient-enter-hooks

#+BEGIN_SRC sh
add_new_resolv_conf() {
  # We don't want /etc/resolv.conf changed
  # So this is an empty function
  return 0
}
#+END_SRC

** pf firewall emerging threats

create /etc/pf.anchors/emerging-threats

#+BEGIN_SRC sh
sudo vim /etc/pf.anchors/emerging-threats
#+END_SRC

add the follow to the file

#+BEGIN_SRC sh
table <emerging_threats> persist file "/etc/emerging-Block-IPs.txt"
block log from <emerging_threats> to any
#+END_SRC

*** edit the /etc/pf.conf file

#+BEGIN_SRC sh
sudo vim /etc/pf.conf
#+END_SRC

add the following code to the file

#+BEGIN_SRC sh
anchor "emerging-threats"
load anchor "emerging-threats" from "/etc/pf.anchors/emerging-threats"
#+END_SRC

*** download emerging threats text file

#+BEGIN_SRC sh
$ curl http://rules.emergingthreats.net/fwrules/emerging-Block-IPs.txt -o /tmp/emerging-Block-IPs.txt
$ sudo cp /tmp/emerging-Block-IPs.txt /etc
$ sudo chmod 644 /etc/emerging-Block-IPs.txt
$ sudo pfctl -f /etc/pf.conf
#+END_SRC

*** logging

#+BEGIN_SRC sh
$ sudo ifconfig pflog0 create
$ sudo tcpdump -n -e -ttt -i pflog0
#+END_SRC

* build custom kernel
** dump smc stats from mac osx

You need to have SMCFanControl on your system and know where the smcFanControl.app is located.
[[smc fan control][https://github.com/hholtmann/smcFanControl/tree/master/smc-command]]

Open Terminal, cd to the directory that has the smcFanControl.app

#+BEGIN_SRC sh
cd /Applications/smcFanControl.app/Contents/Resources
#+END_SRC

dump the smc stats to a text file on the desktop

#+BEGIN_SRC sh
type ./smc -l
#+END_SRC

** bless freebsd efi partition

boot in to mac recovery by pressing option and selecting
disable sips on the mac so we can use the bless comand on the efi partition for freebsd

#+BEGIN_SRC sh
sudo csrutil disable
#+END_SRC

shut the mac
boot into mac osx ,open the terminal

list the disk with diskutil

#+BEGIN_SRC sh
diskutil list
#+END_SRC

switch to root

#+BEGIN_SRC sh
sudo su
#+END_SRC

create a mount point called ESP in /Volumes

#+BEGIN_SRC sh
mkdir /Volumes/ESP
#+END_SRC

mount the efi partition you found by running diskutil list, it will have efi next to the drive

#+BEGIN_SRC sh
mount -t msdos /dev/disk0s1 /Volumes/ESP
#+END_SRC

bless the freebsd efi file

#+BEGIN_SRC sh
bless --mount /Volumes/ESP --setBoot --file /Volumes/ESP/EFI/BOOT/BOOTX64.efi --shortform
#+END_SRC

unmount the /Volume/ESP and the mounted freebsd efi partition

#+BEGIN_SRC sh
umount /Volumes/ESP
#+END_SRC

exit root

#+BEGIN_SRC sh
exit
#+END_SRC

** git check out src

install git

#+BEGIN_SRC sh
sudo pkg install git
#+END_SRC

checkout src to /usr/src
replace 13.2 with the release you want

#+begin_src sh
sudo git clone -b releng/13.2 --depth 1 https://git.freebsd.org/src.git /usr/src
#+end_src

** asmc add macbook air entries

Change directory into the asmc directory you checked out with subversion

#+BEGIN_SRC sh
cd /usr/src/sys/dev/asmc/
#+END_SRC

Back up asmc.c and asmcvar.h  
and add .bak extension

#+BEGIN_SRC sh
cp asmc.c{,.bak}
#+END_SRC

#+BEGIN_SRC sh
cp asmcvar.h{,.bak}
#+END_SRC

edit /usr/src/sys/dev/asmc/asmc.c

#+BEGIN_SRC sh
sudo vim /usr/src/sys/dev/asmc/asmc.c
#+END_SRC

add new entry for macbook air 4,1

#+BEGIN_SRC sh
    {
     "MacBookAir4,1", "Apple SMC Macbook Air 11-inch (Mid 2011)",
     ASMC_SMS_FUNCS_DISABLED,
     ASMC_FAN_FUNCS2, 
     ASMC_LIGHT_FUNCS,
     ASMC_MBA4_TEMPS, ASMC_MBA4_TEMPNAMES, ASMC_MBA4_TEMPDESCS
    },
#+END_SRC

edit /usr/src/sys/dev/asmc/asmcvar.h

#+BEGIN_SRC sh
sudo vim /usr/src/sys/dev/asmc/asmcvar.h
#+END_SRC

add the smc stats we dumped from the mac, you need to add NULL to the end of the array

#+BEGIN_SRC sh
#define	ASMC_MBA4_TEMPS { "TB0T", "TB1T", "TB2T", "TC0C", \
                	"TC0D", "TC0E", "TC0F", "TC0P", \
                        "TC1C", "TC2C", "TCGC", "TCSA", \
                        "TH0F", "TH0J", "TH0O", "TH0o", \
                        "TM0P", "TPCD", "Ta0P", "Th1H", \
                        "Tm0P", "Tm1P", "Ts0P", "Ts0S", \
                         NULL }

#define	ASMC_MBA4_TEMPNAMES { "TB0T", "TB1T", "TB2T", "TC0C", \
                       	   "TC0D", "TC0E", "TC0F", "TC0P", \
                           "TC1C", "TC2C", "TCGC", "TCSA", \
                           "TH0F", "TH0J", "TH0O", "TH0o", \
                           "TM0P", "TPCD", "Ta0P", "Th1H", \
                           "Tm0P", "Tm1P", "Ts0P", "Ts0S", \
                            NULL }

#define	ASMC_MBA4_TEMPDESCS { "TB0T", "TB1T", "TB2T", "TC0C", \
                           "TC0D", "TC0E", "TC0F", "TC0P", \
                           "TC1C", "TC2C", "TCGC", "TCSA", \
                           "TH0F", "TH0J", "TH0O", "TH0o", \
                           "TM0P", "TPCD", "Ta0P", "Th1H", \
                           "Tm0P", "Tm1P", "Ts0P", "Ts0S", \
                            NULL }
#+END_SRC

After editing the asmc files we can now build the custom kernel

** build generic kernel and modules

Switch to root

#+BEGIN_SRC sh
sudo su
#+END_SRC

** new method for building a custom kernel

Do not make edits to GENERIC. Instead, copy the file to a different name and make edits to the copy. The convention is to use a name with all capital letters. When maintaining multiple FreeBSD machines with different hardware, it is a good idea to name it after the machine's hostname. This example creates a copy, named MYKERNEL, of the GENERIC configuration file for the amd64 architecture:

change into the /usr/src/sys/amd64/conf directory

#+BEGIN_SRC sh
cd /usr/src/sys/amd64/conf
#+END_SRC

*** copy the GENERIC file to MYKERENL

#+BEGIN_SRC sh
cp GENERIC MYKERNEL
#+END_SRC

*** edit the MYKERNEL file with vi

#+BEGIN_SRC sh
vi MYKERNEL
#+END_SRC

add the code below to the MYKEREL file,  
this will include the GENERIC kernel using the include option,  
and use the ident option to change the identity name to the name of your custom kernel which is the same as the name of the file.
which in this case is MYKEREL

#+BEGIN_SRC sh
include GENERIC
ident MYKERNEL
#+END_SRC

An include directive is available for use in configuration files. This allows another configuration file to be included in the current one, making it easy to maintain small changes relative to an existing file. If only a small number of additional options or drivers are required, this allows a delta to be maintained with respect to GENERIC, as seen in this example:

Using this method, the local configuration file expresses local differences from a GENERIC kernel. As upgrades are performed, new features added to GENERIC will also be added to the local kernel unless they are specifically prevented using nooptions or nodevice.

*** Change to the /usr/src directory

#+BEGIN_SRC sh
cd /usr/src
#+END_SRC

*** Compile the new kernel by specifying the name of the custom kernel configuration file:

#+BEGIN_SRC sh
make buildkernel KERNCONF=MYKERNEL
#+END_SRC

Install the new kernel associated with the specified kernel configuration file. This command will copy the new kernel to /boot/kernel/kernel and save the old kernel to /boot/kernel.old/kernel:

#+BEGIN_SRC sh
make installkernel KERNCONF=MYKERNEL
#+END_SRC

Shutdown the system and reboot into the new kernel. 

*** old method for building kernel

#+BEGIN_SRC sh
sudo su
cd /usr/src/sys/amd64/conf; config GENERIC; cd ../compile/GENERIC && make cleandepend && make depend && make -j 2 && make install
#+END_SRC

*** keyboard backlight

+ keyboard backlight on

#+BEGIN_SRC sh
sysctl dev.asmc.0.light.control:255
#+END_SRC

+ keyboard backlight off

#+BEGIN_SRC sh
sysctl dev.asmc.0.light.control:0
#+END_SRC
	
** shutdown

shutdown and reboot

#+begin_src sh
sudo shutdown -r now
#+end_src

shutdown and dont reboot

#+begin_src sh
sudo shutdown -p now
#+end_src
