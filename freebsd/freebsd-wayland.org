#+STARTUP: content
#+OPTIONS: num:nil
#+OPTIONS: author:nil
* Freebsd macbook install


+ Download iso file
+ Burn to disc
+ Insert disc restart mac and hold down alt to boot into efi mode


+ [[freebsd dotfiles][https://github.com/NapoleonWils0n/freebsd-dotfiles]]
+ [[freebsd root dotfiles][https://github.com/NapoleonWils0n/freebsd-root]]
+ [[freebsd home bin][https://github.com/NapoleonWils0n/freebsd-bin]]

** download freebsd 

download the memstick.img.xz to install on a usb stick

#+begin_src sh
wget https://download.freebsd.org/releases/amd64/amd64/ISO-IMAGES/14.0/FreeBSD-14.0-RELEASE-amd64-memstick.img.xz
#+end_src

download the checksum

#+begin_src sh
wget https://download.freebsd.org/releases/amd64/amd64/ISO-IMAGES/14.0/CHECKSUM.SHA512-FreeBSD-14.0-RELEASE-amd64
#+end_src

Verify the checksum 

#+begin_src sh
sha512sum -c CHECKSUM.SHA512-FreeBSD-14.0-RELEASE-amd64 FreeBSD-14.0-RELEASE-amd64-memstick.img.xz
#+end_src

** writing an image file to usb

#+begin_src sh
xz -dv FreeBSD-14.0-RELEASE-amd64-memstick.img.xz
#+end_src

#+begin_src sh
sudo dd if=FreeBSD-14.0-RELEASE-amd64-memstick.img of=/dev/sda bs=1M conv=sync
#+end_src

** root on zfs

Select root on zfs during in

+ encrypt discs
+ encrypt swap
+ swap size 8gig

freebsd installer partition scheme
for apple hardware choose gpt (bios+uefi)

** set the root password

set the root password

** change settings to insecure

#+BEGIN_SRC sh
console none unknown off insecure
#+END_SRC

** bootstrap the system

To bootstrap the system, run:

#+begin_src sh
su
#+end_src

#+BEGIN_SRC sh
/usr/sbin/pkg
#+END_SRC

** sudo

switch to root

#+begin_src sh
su
#+end_src

install sudo 

#+BEGIN_SRC sh
pkg install sudo
#+END_SRC

edit /etc/sudoers

#+BEGIN_SRC sh
visudo
#+END_SRC

add your user to the sudoers file, replace username with your username

#+BEGIN_SRC sh
username   ALL=(ALL:ALL) ALL
#+END_SRC

** create new user

if you didnt create a new user duration the install
you can run the adduser command to add a new user

#+BEGIN_SRC sh
adduser
#+END_SRC

add the new user to wheel and video groups

** single user mode

single user mode require root password

change single user mode to requite root password
change setting from secure to insecure to require root password

edit /etc/ttys

#+BEGIN_SRC sh
sudo nano /etc/ttys
#+END_SRC

** drivers

#+BEGIN_SRC sh
sudo pkg install libva-intel-driver libva-utils drm-515-kmod 
#+END_SRC

+ use libva-intel-driver and drm-515-kmod instead of xf86-video-intel for video hardware accleration

we also need to edit /etc/rc.conf and add the path to the i915kms.ko file

#+begin_src sh
sudo sysrc kld_list="i915kms"
#+end_src

or manually edit the config file

#+BEGIN_SRC sh
sudo vim /etc/rc.conf
#+END_SRC

then add the code below to /etc/rc.conf

#+BEGIN_SRC sh
kld_list="i915kms"
#+END_SRC

** wayland

It has been reported that ZFS users may experience issues with some Wayland clients because they need access to posix_fallocate() in the runtime directory. While the author could not reproduce this issue on their ZFS system, a recommended workaround is not to use ZFS for the runtime directory and instead use tmpfs for the /var/run directory. In this case, the tmpfs file system is used for /var/run and mounted through the command mount -t tmpfs tmpfs /var/run command and then make this change persist across reboots through /etc/fstab. The XDG_RUNTIME_DIR environment variable could be configured to use /var/run/user/$UID and avoid potential pitfalls with ZFS. Consider that scenario when reviewing the configuration examples in the following sections.

#+begin_src sh
sudo pkg install wayland wayland-protocols seatd qt5ct qt5-wayland 
#+end_src

gtk-layer-shell gtk4

#+begin_src sh
sudo mkdir -p /var/run/user/1001
sudo chown -R djwilcox:wheel /var/run/user/1001
sudo chmod 700 /var/run/user/1001
#+end_src

set the runtime dir

#+begin_src sh
export XDG_RUNTIME_DIR=/var/run/user/`id -u`
#+end_src

*** fstab

Add procfs to /etc/fstab with this line

#+begin_src sh
proc /proc procfs rw 0 0
#+end_src

The seatd daemon helps manage access to shared system devices for non-root users in compositors; this includes graphics cards. For traditional X11 managers, seatd is not needed, such as both Plasma and GNOME, but for the Wayland compositors discussed here, it will need enabled on the system and be running before starting a compositor environment. To enable and start the seatd daemon now, and on system initialization:

#+begin_src sh
sudo sysrc seatd_enable="YES"
sudo sysrc dbus_enable="YES"
sudo sysrc hald_enable="YES"
#+end_src

[[https://docs.freebsd.org/en/books/handbook/wayland/]]

[[https://forums.freebsd.org/threads/example-tutorial-pure-wayland-desktop.85930/]]

[[https://forums.freebsd.org/threads/sway-and-wayland.83682/]]

** wayfire

[[https://github.com/WayfireWM/wayfire/wiki/Configuration]]

[[https://forums.freebsd.org/threads/example-tutorial-pure-wayland-desktop.85930/]]

[[https://forums.freebsd.org/threads/example-tutorial-pure-wayland-desktop-discussion.85994/]]

#+begin_src sh
sudo pkg install wayfire wf-shell wayfire-plugins-extra alacritty swaylock-effects swayidle wlogout kanshi wcm
#+end_src

config

#+begin_src sh
mkdir ~/.config/wayfire
cp /usr/local/share/examples/wayfire/wayfire.ini ~/.config/wayfire
#+end_src

test config

#+begin_src sh
wayfire -c ~/.config/wayfire/wayfire.ini
#+end_src

other package
wcm
wayfire-plugins-extra

HiDPI settings

#+begin_src sh
[core]
xwayland_scale = 2
[autostart]
xsettingsd = xsettingsd
#+end_src

** beadm install

#+BEGIN_SRC sh
pkg install beadm
#+END_SRC

See which boot environments you have.

#+BEGIN_SRC sh
beadm list
#+END_SRC

The only boot environment is named default. Under active, N means the environment is active now.  
An R means the environment will be active on reboot.

check the current version of freebsd with uname

#+BEGIN_SRC sh
uname -s
#+END_SRC

check for an update

#+BEGIN_SRC sh
freebsd-update fetch
#+END_SRC

The updates have been downloaded but still haven’t been installed.  
I will prepare a boot environment just in case after installing them something breaks

*** create new boot environment

I need to upgrade this host to the latest version of FreeBSD 12.0, p3.  
This is where we need a new boot environment. I’ll name it after the release.

run the beadm commands as root

#+BEGIN_SRC sh
beadm create 12.0-p3
#+END_SRC

list the boot environments

#+BEGIN_SRC sh
beadm list
#+END_SRC

Activate the new boot environment.

#+BEGIN_SRC sh
beadm activate 12.0-p3
#+END_SRC

list the boot environments

#+BEGIN_SRC sh
beadm list
#+END_SRC

While the default environment has an N, indicating it’s active now,
the 12.0-p3 environment has an R, so it will be active after a reboot.

Reboot. After the reboot, you’ll see the new environment is running.

**** install updates in new boot environment

install update in new boot environment

#+BEGIN_SRC sh
freebsd-update install
#+END_SRC

reboot and run freebsd-update install again

#+BEGIN_SRC sh
freebsd-update install
#+END_SRC

check for package updates

#+BEGIN_SRC sh
pkg update
pkg upgrade
#+END_SRC

create a zfs snapshot

#+BEGIN_SRC sh
zfs snapshot -r zroot@12.0-p3
#+END_SRC

** bluetooth freebsd stop

#+BEGIN_SRC sh
sudo service bluetooth onestop ubt0
#+END_SRC

** install zsh

install zsh

#+BEGIN_SRC sh
sudo pkg install zsh zsh-completions zsh-syntax-highlighting
#+END_SRC

change the shell to bash

#+BEGIN_SRC sh
chsh -s /usr/local/bin/zsh
#+END_SRC

add to your ~/.zshrc

#+begin_src sh
source /usr/local/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
#+end_src

** ports

To download a compressed snapshot of the Ports Collection into /var/db/portsnap:

#+BEGIN_SRC sh
# portsnap fetch
#+END_SRC

2 When running Portsnap for the first time, extract the snapshot into /usr/ports:

#+BEGIN_SRC sh
# portsnap extract
#+END_SRC

3 After the first use of Portsnap has been completed as shown above, /usr/ports can be updated as needed by running:

#+BEGIN_SRC sh
# portsnap fetch update
#+END_SRC

** emacs


#+begin_src sh
sudo pkg install emacs-devel tree-sitter cantarell-fonts
#+end_src

add the follwing line to the top of your emacs config

#+begin_src emacs-lisp
(setq native-comp-deferred-compilation nil
comp-enable-subr-trampolines nil)
#+end_src

exit emacs

#+begin_src sh
rm -rf ~/.emacs.d/eln-cache
#+end_src

throttle compilation jobs

native-comp-async-jobs-number

** qtt5

#+begin_src sh
export QT_QPA_PLATFORMTHEME=qt5ct
#+end_src

** applications

#+BEGIN_SRC sh
sudo pkg install openvpn wget2 ImageMagick7 tmux xkbcomp mpv mpv-mpris abook apg aria2 aspell en-aspell bat dictd fd-find firacode fzf noto-basic noto-emoji mpc mutt ncmpc oath-toolkit ripgrep ripgrep-all socat sox ts translate-shell urlview w3m weechat wl-clipboard yt-dlp git firefox ffmpeg hs-pandoc gstreamer1-plugins-opus
#+END_SRC

enable dict

#+begin_src sh
sudo sysrc dictd_enable="YES"
#+end_src

** audio
*** set vol to 100

#+begin_src sh
mixer vol.volume=100:100
#+end_src

*** set pcm to 100

#+begin_src sh
mixer pcm.volume=100:100
#+end_src

*** set rec to 100

#+begin_src sh
mixer rec.volume=100:100
#+end_src

*** set monitor to 100

#+begin_src sh
mixer monitor.volume=100:100
#+end_src

*** mute

#+begin_src sh
mixer vol.mute=1
#+end_src

*** unmute

#+begin_src sh
mixer vol.mute=0
#+end_src

** mount ext4 as read only
	
add user to operator group

#+begin_src sh
sudo pw groupmod operator -m djwilcox
#+end_src

Edit /etc/devfs.rules to allow the operator group to be able to read and write the device:

#+begin_src sh
sudo vi /etc/devfs.rules
#+end_src

/etc/devfs.rules


#+begin_src sh
[localrules=5]
add path 'da*' mode 0660 group operator
#+end_src

Then edit /etc/rc.conf to enable the devfs.rules(5) ruleset:

#+begin_src sh
sudo vi /etc/rc.conf
#+end_src

#+begin_src sh
devfs_system_ruleset="localrules"
#+end_src

Next allow regular user to mount file system:

#+begin_src sh
sudo vi /etc/sysctl.conf
#+end_src

#+begin_src sh
vfs.usermount=1
#+end_src

Also execute sysctl to make the update available now:

#+begin_src sh
sudo sysctl vfs.usermount=1
#+end_src

vfs.usermount: 0 -> 1

Create a directory which a regular use can mount to:

#+begin_src sh
sudo mkdir -p /mnt/usb
#+end_src

change the permission so your user own the directory with chown
replace username with your username

#+begin_src sh
sudo chown username:username /mnt/usb
#+end_src

install ext4 fuse

#+begin_src sh
sudo pkg install fusefs-ext4fuse
#+end_src

Lastly, edit /boot/loader.conf to load the module each boot:

#+begin_src sh
sudo vi /boot/loader.conf
#+end_src

#+begin_src sh
fuse_load="YES"
fusefs_load="YES"
#+end_src

Now mounting USB drive with ext4 filesystem is working!

#+begin_src sh
ext4fuse /dev/da0s1 /mnt/usb
#+end_src

*** gpg
To export your secret keys, use:

#+begin_src sh
gpg --export-secret-key -a > secret.key
#+end_src

and to import them again:

#+begin_src sh
gpg --import secret.key
#+end_src

*** freebsd dbus

#+begin_src sh
sudo dbus-uuidgen > /etc/machine-id
#+end_src

** chromium widevine

[[https://forums.freebsd.org/threads/watching-spotify-and-listening-to-netflix-in-2023.90695/#post-626065]]

#+begin_src sh
% sudo pkg install chromium # 117.0.5938.149_2 or higher

% sudo pkg install foreign-cdm
% sudo sysrc linux_enable="YES"
% sudo service linux start

% git clone --depth 1 https://github.com/freebsd/freebsd-ports
% cd freebsd-ports/www/linux-widevine-cdm
% make
% sudo make install
#+end_src

** edit /etc/dhclient-enter-hooks

#+BEGIN_SRC sh
sudo vim /etc/dhclient-enter-hooks
#+END_SRC

add the following to /etc/dhclient-enter-hooks

#+BEGIN_SRC sh
add_new_resolv_conf() {
  # We don't want /etc/resolv.conf changed
  # So this is an empty function
  return 0
}
#+END_SRC

** pf firewall emerging threats

create /etc/pf.anchors/emerging-threats

#+BEGIN_SRC sh
sudo vim /etc/pf.anchors/emerging-threats
#+END_SRC

add the follow to the file

#+BEGIN_SRC sh
table <emerging_threats> persist file "/etc/emerging-Block-IPs.txt"
block log from <emerging_threats> to any
#+END_SRC

*** edit the /etc/pf.conf file

#+BEGIN_SRC sh
sudo vim /etc/pf.conf
#+END_SRC

add the following code to the file

#+BEGIN_SRC sh
anchor "emerging-threats"
load anchor "emerging-threats" from "/etc/pf.anchors/emerging-threats"
#+END_SRC

*** download emerging threats text file

#+BEGIN_SRC sh
$ curl http://rules.emergingthreats.net/fwrules/emerging-Block-IPs.txt -o /tmp/emerging-Block-IPs.txt
$ sudo cp /tmp/emerging-Block-IPs.txt /etc
$ sudo chmod 644 /etc/emerging-Block-IPs.txt
$ sudo pfctl -f /etc/pf.conf
#+END_SRC

*** logging

#+BEGIN_SRC sh
$ sudo ifconfig pflog0 create
$ sudo tcpdump -n -e -ttt -i pflog0
#+END_SRC

* zfs datasets

zfs list datasets

#+BEGIN_SRC sh
zfs list
#+END_SRC

the name of the main pool is called zpool

+ switch to root

#+BEGIN_SRC sh
sudo su
#+END_SRC

** create the zfs datasets

create the main dataset under zpool

#+BEGIN_SRC sh
zfs create zroot/home/data
zfs create zroot/home/data/desktop
zfs create zroot/home/data/documents
zfs create zroot/home/data/downloads
zfs create zroot/home/data/git
zfs create zroot/home/data/config
zfs create zroot/home/data/local
zfs create zroot/home/data/mozilla
zfs create zroot/home/data/ossuary
zfs create zroot/home/data/weechat
#+END_SRC

*** copy directories to zfs datasets

copy files to the dataset before setting the mount point and mounting the dataset

#+BEGIN_SRC sh
sudo cp -Rpv /home/djwilcox/Desktop/ /zroot/home/data/desktop
sudo cp -Rpv /home/djwilcox/documents/ /zroot/home/data/documents
sudo cp -Rpv /home/djwilcox/downloads/ /zroot/home/data/downloads
sudo cp -Rpv /home/djwilcox/git/ /zroot/home/data/git
sudo cp -Rpv /home/djwilcox/.config/ /zroot/home/data/config
sudo cp -Rpv /home/djwilcox/.local/ /zroot/home/data/local
sudo cp -Rpv /home/djwilcox/.mozilla/ /zroot/home/data/mozilla
sudo cp -Rpv /home/djwilcox/.ossuary/ /zroot/home/data/ossuary
sudo cp -Rpv /home/djwilcox/.weechat/ /zroot/home/data/weechat
#+END_SRC

we use the -r option for recursive copy  
and the -p option to keep the permissions of the files and directorys  
and the -v option for verbose

we use ~/documents/ to copy the contents of the documents directory  
note the slash at the end of the docuemnts path

**** create the mount points in your home directory

create the zfs mount points

#+BEGIN_SRC sh
zfs set mountpoint=/usr/home/djwilcox/Desktop zroot/data/desktop
zfs set mountpoint=/usr/home/djwilcox/documents zroot/data/documents
zfs set mountpoint=/usr/home/djwilcox/downloads zroot/data/downloads
zfs set mountpoint=/usr/home/djwilcox/git zroot/data/git
zfs set mountpoint=/usr/home/djwilcox/.kodi zroot/data/kodi
zfs set mountpoint=/usr/home/djwilcox/.config zroot/data/config
zfs set mountpoint=/usr/home/djwilcox/.emacs.d zroot/data/emacsd
zfs set mountpoint=/usr/home/djwilcox/.local zroot/data/local
zfs set mountpoint=/usr/home/djwilcox/.mozilla zroot/data/mozilla
zfs set mountpoint=/usr/home/djwilcox/.ossuary zroot/data/ossuary
zfs set mountpoint=/usr/home/djwilcox/.weechat zroot/data/weechat
#+END_SRC

+ change the permission on the mountpoint if needed

#+BEGIN_SRC sh
sudo chown -R djwilcox:djwilcox ~/Desktop
#+END_SRC

+ chmod the permissions to 700

#+BEGIN_SRC sh
chmod 700 ~/Desktop
#+END_SRC

** shutdown

shutdown and reboot

#+begin_src sh
sudo shutdown -r now
#+end_src

shutdown and dont reboot

#+begin_src sh
sudo shutdown -p now
#+end_src
