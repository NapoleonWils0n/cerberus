#+STARTUP: content
#+OPTIONS: num:nil
#+OPTIONS: author:nil
* broadcom wifi freebsd
** build custom kernel

Switch to root

#+BEGIN_SRC sh
sudo su
#+END_SRC

Do not make edits to GENERIC.
Instead, copy the file to a different name and make edits to the copy. 

change into the /usr/src/sys/amd64/conf directory

#+BEGIN_SRC sh
cd /usr/src/sys/amd64/conf
#+END_SRC

*** copy the GENERIC file to WIFI

#+BEGIN_SRC sh
cp GENERIC WIFI
#+END_SRC

*** edit the WIFI file

#+begin_example
/usr/src/sys/amd64/conf/WIFI
#+end_example

#+BEGIN_SRC sh
vi WIFI
#+END_SRC

add the code below to the WIFI file,  
this will include the GENERIC kernel using the include option,  
and use the ident option to change the identity name to the name of your custom kernel which is the same as the name of the file.

#+BEGIN_SRC conf
cpu         HAMMER
include     GENERIC
ident       WIFI
#+END_SRC

search for bwn and uncomment the device bwn line 
it should be line 297

#+begin_src conf
device    bwn			# Broadcom BCM43xx wireless NICs.
#+end_src

at the end of the file add the following options

#+begin_src conf
options    BWN_GPL_PHY   
#+end_src

An include directive is available for use in configuration files. This allows another configuration file to be included in the current one, making it easy to maintain small changes relative to an existing file. If only a small number of additional options or drivers are required, this allows a delta to be maintained with respect to GENERIC, as seen in this example:

Using this method, the local configuration file expresses local differences from a GENERIC kernel. As upgrades are performed, new features added to GENERIC will also be added to the local kernel unless they are specifically prevented using nooptions or nodevice.

*** Compile the new kernel

Change to the /usr/src directory

#+BEGIN_SRC sh
cd /usr/src
#+END_SRC

compile the WIFI kernel

#+BEGIN_SRC sh
make buildkernel KERNCONF=WIFI
#+END_SRC

Install the new kernel associated with the specified kernel configuration file. This command will copy the new kernel to /boot/kernel/kernel and save the old kernel to /boot/kernel.old/kernel:

#+BEGIN_SRC sh
make installkernel KERNCONF=WIFI
#+END_SRC

Shutdown the system and reboot into the new kernel. 

** install net/bwn-firmware-kmod

use poudriere to build the net/bwn-firmware-kmod port

#+BEGIN_SRC sh
net/bwn-firmware-kmod
#+END_SRC

** loader.conf

#+begin_example
/boot/loader.conf
#+end_example

#+begin_src conf
# broadcom wifi
hw.bwn_pci.preferred="1"
bwn_v4_ucode_load="YES"
bwn_v4_n_ucode_load="YES"
bwn_v4_lp_ucode_load="YES"
wlan_wep_load="YES"
wlan_ccmp_load="YES"
wlan_tkip_load="YES"
#+end_src

** rc.conf

#+begin_src conf
# laggo failover device - bwn
# ethernet mac address set to wifi mac address
ifconfig_ue0="ether 04:0c:ce:d5:b0:ae"
cloned_interfaces="lagg0"
wlans_bwn0="wlan0"
ifconfig_wlan0="WPA"
create_args_wlan0="country US regdomain FCC"
ifconfig_lagg0="up laggproto failover laggport ue0 laggport wlan0 DHCP"
#+end_src

** pf.conf

#+begin_src conf
int_if="lagg0" # lagg0 failover
#+end_src

** wpa_supplicant.conf

#+begin_example
/etc/wpa_supplicant.conf
#+end_example

#+BEGIN_SRC sh
network={
ssid="Homezonexxxx-xxxxx"
psk="Komplexxxxx---xxxxx"
}
#+END_SRC
