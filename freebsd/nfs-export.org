#+STARTUP: content
* zfs dataset share with nfs
** resources

[[https://docs.freebsd.org/en/books/handbook/network-servers/#network-nfs]]

[[https://forums.freebsd.org/threads/nfsv4-etc-exports-syntax-and-overall-docs.23526/]]

[[https://forums.FreeBSD.org/threads/nfs-server-and-user-mapping.51122/post-286524]]

[[https://forums.freebsd.org/threads/enabling-nfsv4.90927/]]

[[https://www.server-world.info/en/note?os=FreeBSD_14&p=nfs&f=2]]

[[https://vermaden.wordpress.com/2023/07/01/nfsv4-server-inside-freebsd-vnet-jail/]]

** setup
*** host
**** sysrc

#+begin_src sh
doas sysrc nfs_server_enable=YES
doas sysrc nfsv4_server_only=YES
doas sysrc nfs_server_flags="-t"
#+end_src

**** manually edit rc.conf

#+begin_src sh
sudo vi /etc/rc.conf
#+end_src

#+begin_src conf
nfs_server_enable=YES
nfsv4_server_only=YES
nfs_server_flags="-t"
#+end_src

*** exports

#+begin_src sh
sudo vi /etc/exports
#+end_src

#+begin_src conf
V4: / 192.168.1.141

/var/run/xdg/djwilcox -maproot=root -alldirs 192.168.1.141
#+end_src

*** sysctl

#+begin_src sh
doas sysctl vfs.nfs.enable_uidtostring=1
doas sysctl vfs.nfsd.enable_stringtouid=1
#+end_src

#+begin_src sh
sudo vi /etc/sysctl.conf
#+end_src

#+begin_src conf
vfs.nfs.enable_uidtostring=1
vfs.nfsd.enable_stringtouid=1
#+end_src

*** pf

#+begin_src conf
#=========================================================================#
# variables, macro and tables                                             #
#=========================================================================#

int_if="lagg0" # lagg0 failover
#int_if="ue0" # usb to ethernet adaptor
#int_if="bge0" # thunderbolt to ethernet adaptor
#int_if="wlan0" # iwlwifi
#int_if="wlan1" # ralink usb wifi
vpn_if="tun0" # vpn interface
all_networks="0.0.0.0/0"
vpn_network="$vpn_if:network"
# 6881, 6882 = transmission. , 22000, 21025 = syncthing
tcp_services = "{ ntp, 6881, 22000 }" # tcp services - torrent
udp_services = "{ ntp, 6882, 21025 }" # udp services - torrent
nfs_services = "{ 2049 }" # 2049 = nfs
icmp_types = "{ echoreq, unreach }"
tcp_state="flags S/SA keep state"
udp_state="keep state"

#table <internet> { $all_networks, !self, !$int_if:network } # internet
table <lan> { $int_if:network, !self }                      # lan network
table <myself> { self }                                     # self
table <martians> { 0.0.0.0/8 10.0.0.0/8 127.0.0.0/8 169.254.0.0/16     \
	 	   172.16.0.0/12 192.0.0.0/24 192.0.2.0/24 224.0.0.0/3 \
	 	   192.168.0.0/16 198.18.0.0/15 198.51.100.0/24        \
	 	   203.0.113.0/24 }                         # broken networks

#=========================================================================#
# global policy                                                           #
#=========================================================================#

set block-policy drop
set loginterface $int_if
set fingerprints "/etc/pf.os"
set skip on lo0
scrub in all fragment reassemble no-df max-mss 1440
# nat jail
nat on $int_if from {lo1:network} to any -> ($int_if)
antispoof log quick for { lo $int_if } label "block_spoofing"

#=========================================================================#
# block                                                                   #
#=========================================================================#

block log all # block log all
block return out quick inet6 all tag IPV6 # block ipv6 
block in quick inet6 all tag IPV6 # block ipv6

# block broken networks - turned off for synergy
# block in quick from { <martians> no-route urpf-failed } to any tag BAD_PACKET

#=========================================================================#
# anchors                                                                 #
#=========================================================================#

# emerging threats - anchor
#anchor "emerging-threats"
#load anchor "emerging-threats" from "/etc/pf.anchors/emerging-threats"

# openvpn - anchor
anchor "openvpn"

#=========================================================================#
# traffic tag                                                             #
#=========================================================================#

# icmp
pass inet proto icmp all icmp-type $icmp_types keep state tag ICMP

# Allow the tcp and udp services defined in the macros at the top of the file
pass in on $int_if inet proto tcp from any to ($int_if) port $tcp_services $tcp_state tag TCP_IN
pass in on $int_if inet proto udp from any to ($int_if) port $udp_services $udp_state tag UDP_IN

# nfs
pass in on $int_if inet proto tcp from <lan> to any port $nfs_services keep state

# outbound traffic
block out on $int_if all
pass out quick on $int_if all modulate state
#pass out quick on $int_if from <myself> to <lan> modulate state tag LAN_OUT
#pass out quick on $int_if from <myself> to <internet> modulate state tag INTERNET_OUT

#+end_src

*** Start the NFS server: 

#+begin_src sh
doas service nfsd start
#+end_src

*** client set up

#+begin_src sh
sudo sysctl vfs.nfs.enable_uidtostring=1
#+end_src

#+begin_src sh
sudo vi /etc/sysctl.conf
#+end_src

#+begin_src conf
vfs.nfs.enable_uidtostring=1
#+end_src

To enable NFS clients, set this option in each client’s /etc/rc.conf:

#+begin_src conf
sudo sysrc nfs_client_enable="YES"
#+end_src

Then, run this command on each NFS client:

#+begin_src sh
sudo service nfsclient start
#+end_src

The client now has everything it needs to mount a remote file system. In these examples, the server’s name is server and the client’s name is client. To mount /home on server to the /mnt mount point on client:

#+begin_src sh
sudo mount -o nfsv4 192.168.1.131:/var/run/xdg/djwilcox /var/run/xdg/djwilcox
#+end_src
