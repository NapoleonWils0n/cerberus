#+STARTUP: content
* freebsd thick jail
** freebsd handbook jails

[[https://docs.freebsd.org/en/books/handbook/jails/]]

** jail config

To start jails when the system boots

enable jails

#+begin_src sh
sudo sysrc jail_enable="YES"
sudo sysrc jail_parallel_start="YES"
sudo sysrc jail_list="freebsd"
sudo sysrc cloned_interfaces="lo1"
sudo sysrc ifconfig_lo1_aliases="inet 10.10.0.1-12/24"
#+end_src

#+begin_example
/etc/rc.conf
#+end_example

#+begin_src conf
jail_enable="YES"
jail_parallel_start="YES"
jail_list="freebsd"
cloned_interfaces="lo1"
ifconfig_lo1_aliases="inet 10.10.0.1-12/24"
#+end_src

With jail_parallel_start, all configured jails will be started in the background.

** jail directory tree

create the zfs dataset and set the mountpoint

#+begin_src sh
sudo zfs create -o mountpoint=/usr/local/jails zroot/jails
sudo zfs create zroot/jails/media
sudo zfs create zroot/jails/templates
sudo zfs create zroot/jails/containers
#+end_src

*** /etc/jail.conf

create the /etc/jail.conf file if it doesn't exist

#+begin_example
/etc/jail.conf
#+end_example

add the following code to the jail.conf file to include \\
files with a .conf extension in the /etc/jail.conf.d/ directory

#+begin_src conf
# startup/logging
exec.start = "/bin/sh /etc/rc";
exec.stop = "/bin/sh /etc/rc.shutdown";
exec.consolelog = "/var/log/jail_console_${name}.log";
#+end_src

** freebsd devfs.rules

#+begin_example
/etc/devfs.rules
#+end_example

#+begin_src conf
[jails=7]
add include $devfsrules_hide_all
add include $devfsrules_unhide_basic
add include $devfsrules_unhide_login
add path 'mixer*' unhide
add path 'dsp*' unhide
add path 'dri*' unhide
add path 'drm*' unhide
add path 'nvidia*' unhide
add path 'speaker*' unhide
#+end_src

after adding the devfs rules reboot

** create thick jail

In principle, a jail only needs a hostname, a root directory, an IP address, and a userland.
The userland for the jail can be obtained from the official FreeBSD download servers.

Execute the following command to download the userland:

#+begin_src sh
sudo fetch https://download.freebsd.org/ftp/releases/amd64/amd64/14.1-RELEASE/base.txz -o /usr/local/jails/media/14.1-RELEASE-base.txz
#+end_src

Once the download is complete, it will be necessary to extract the contents into the jail directory.

Execute the following commands to extract the userland into the jailâ€™s directory:

#+begin_src sh
sudo mkdir -p /usr/local/jails/containers/classic
sudo tar -xf /usr/local/jails/media/14.1-RELEASE-base.txz -C /usr/local/jails/containers/classic --unlink
#+end_src

With the userland extracted in the jail directory, it will be necessary to copy the timezone and DNS server files:

#+begin_src sh
sudo cp /etc/resolv.conf /usr/local/jails/containers/classic/etc/resolv.conf
sudo cp /etc/localtime /usr/local/jails/containers/classic/etc/localtime
#+end_src

With the files copied, the next thing to do is update to the latest patch level by executing the following command:

#+begin_src sh
sudo freebsd-update -b /usr/local/jails/containers/classic/ fetch install
#+end_src
** /etc/jail.conf.d/freebsd.conf

create the /etc/jail.conf.d/ directory

#+begin_src sh
sudo mkdir -p /etc/jail.conf.d/
#+end_src

#+begin_example
/etc/jail.conf.d/freebsd.conf
#+end_example

#+begin_src sh
classic {
    # hostname/path
    host.hostname = "${name}";
    path = "/usr/local/jails/containers/${name}";

    # permissions
    allow.raw_sockets;
    exec.clean;
    persist;
    sysvmsg=inherit;
    sysvsem=inherit;
    sysvshm=inherit;
    enforce_statfs=1;

    # permissions
    devfs_ruleset=7;

    # network
    ip4.addr="lo1|10.10.0.5/24";

    # mount
    mount.fstab="/usr/local/jails/containers/classic/etc/fstab";
}
#+end_src

** pf.conf

#+begin_src sh
/etc/pf.conf:
#+end_src

nat for jail

#+begin_src sh
nat on $int_if from {lo1:network} to any -> ($int_if)
antispoof log quick for { lo $int_if } label "block_spoofing"
#+end_src

full pf.conf example

#+begin_src conf
#=========================================================================#
# variables, macro and tables                                             #
#=========================================================================#

int_if="ue0" # usb to ethernet adaptor
#int_if="bge0" # thunderbolt to ethernet adaptor
#int_if="wlan0" # ralink usb wifi
vpn_if="tun0" # vpn interface
all_networks="0.0.0.0/0"
vpn_network="$vpn_if:network"
tcp_services = "{ ntp, 6881 }" # tcp services - torrent
udp_services = "{ ntp, 6882 }" # udp services - torrent
icmp_types = "{ echoreq, unreach }"
tcp_state="flags S/SA keep state"
udp_state="keep state"

#table <internet> { $all_networks, !self, !$int_if:network } # internet
#table <lan> { $int_if:network, !self }                      # lan network
table <myself> { self }                                     # self
table <martians> { 0.0.0.0/8 10.0.0.0/8 127.0.0.0/8 169.254.0.0/16     \
	 	   172.16.0.0/12 192.0.0.0/24 192.0.2.0/24 224.0.0.0/3 \
	 	   192.168.0.0/16 198.18.0.0/15 198.51.100.0/24        \
	 	   203.0.113.0/24 }                         # broken networks

#=========================================================================#
# global policy                                                           #
#=========================================================================#

set block-policy drop
set loginterface $int_if
set fingerprints "/etc/pf.os"
set skip on lo0
scrub in all fragment reassemble no-df max-mss 1440
# nat jail
nat on $int_if from {lo1:network} to any -> ($int_if)
antispoof log quick for { lo $int_if } label "block_spoofing"

#=========================================================================#
# block                                                                   #
#=========================================================================#

block log all # block log all
block return out quick inet6 all tag IPV6 # block ipv6 
block in quick inet6 all tag IPV6 # block ipv6

# block broken networks - turned off for synergy
# block in quick from { <martians> no-route urpf-failed } to any tag BAD_PACKET

#=========================================================================#
# anchors                                                                 #
#=========================================================================#

# emerging threats - anchor
#anchor "emerging-threats"
#load anchor "emerging-threats" from "/etc/pf.anchors/emerging-threats"

# openvpn - anchor
anchor "openvpn"

#=========================================================================#
# traffic tag                                                             #
#=========================================================================#

# icmp
pass inet proto icmp all icmp-type $icmp_types keep state tag ICMP

# Allow the tcp and udp services defined in the macros at the top of the file
pass in on $int_if inet proto tcp from any to ($int_if) port $tcp_services $tcp_state tag TCP_IN
pass in on $int_if inet proto udp from any to ($int_if) port $udp_services $udp_state tag UDP_IN

# outbound traffic
block out on $int_if all
pass out quick on $int_if all modulate state
#+end_src

** freebsd jail fstab

#+begin_example
/usr/local/jails/linux/ubuntu/etc/fstab
#+end_example

#+begin_src conf
# fstab
devfs           /usr/local/jails/containers/classic/dev      devfs           rw                      0       0
tmpfs           /usr/local/jails/containers/classic/dev/shm  tmpfs           rw,size=1g,mode=1777    0       0
fdescfs         /usr/local/jails/containers/classic/dev/fd   fdescfs         rw,linrdlnk             0       0
linprocfs       /usr/local/jails/containers/classic/proc     linprocfs       rw                      0       0
linsysfs        /usr/local/jails/containers/classic/sys      linsysfs        rw                      0       0
/tmp            /usr/local/jails/containers/classic/tmp      nullfs          rw                      0       0
/home           /usr/local/jails/containers/classic/home     nullfs          rw                      0       0
# uncomment the line below for the xdg runtime directory for wayland
#/var/run/xdg/djwilcox /usr/local/jails/containers/classic/var/run/xdg/djwilcox  nullfs rw                      0       0
#+end_src
