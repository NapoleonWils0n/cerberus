#+STARTUP: content
* byhve linux
** resource

[[https://github.com/churchers/vm-bhyve]]

[[https://vermaden.wordpress.com/2023/08/18/freebsd-bhyve-virtualization/]]

[[https://i-bsd.com/freebsd-vm-bhyve-linux/]]

[[https://wiki.freebsd.org/chengcui/install_Ubuntu22.04_VM_via_bhyve]]

[[https://www.cyberciti.biz/faq/how-to-install-linux-vm-on-freebsd-using-bhyve-and-zfs/]]

[[https://www.davd.io/install-ubuntu-on-freebsd-with-bhyve/]]
** vm-bhyve setup
*** packages

#+begin_src sh
doas pkg install bhyve-firmware grub2-bhyve edk2-bhyve vm-bhyve-devel
#+end_src

*** zfs dataset

#+begin_src sh
doas zfs create -o mountpoint=/vm zroot/vm
doas zfs create -o mountpoint=/vm/.iso zroot/vm/iso
doas zfs create -o mountpoint=/vm/.templates zroot/vm/templates
#+end_src

*** rc.conf

#+begin_src sh
doas sysrc kld_list+="vmm nmdm"
doas sysrc vm_enable=YES
doas sysrc vm_dir="zfs:zroot/vm"
#+end_src

*** kldload

only needed if you havent rebooted, and not needed after that

#+begin_src sh
kldload vmm nmdm
#+end_src

*** networking

gateway enable

#+begin_src sh
doas sysrc gateway_enable=YES
#+end_src

sysctl 

#+begin_src sh
doas sysctl net.link.tap.up_on_open=1
doas sysctl net.inet.ip.forwarding=1
#+end_src

set option permanently

#+begin_src sh
doas echo "net.link.tap.up_on_open=1" >> /etc/sysctl.conf
doas echo "net.inet.ip.forwarding=1" >> /etc/sysctl.conf
#+end_src

*** copy vm-bhyve config

#+begin_src sh
doas cp -a /usr/local/share/examples/vm-bhyve /vm/.templates
#+end_src

*** doas

edit doas.conf and add a rule for the vm command

#+begin_src sh
doas vi /usr/local/etc/doas.conf
#+end_src

#+begin_src conf
# vm-bhyve
permit nopass :djwilcox cmd vm
#+end_src

** vm-bhyve start
*** service vm start

#+begin_src sh
doas service vm start
#+end_src

*** vm init

#+begin_src sh
doas vm init
#+end_src

*** networking

#+begin_src sh
doas vm switch create public
doas vm switch add public lagg0
#+end_src

** vm-bhyve create
*** fetch iso

i found the vm iso command stopped downloading the iso part way through,
so instead i used fetch to download the iso

#+begin_src sh
doas fetch -o /vm/.iso/ubuntu-24.04.1-live-server-amd64.iso 'https://releases.ubuntu.com/24.04.1/ubuntu-24.04.1-live-server-amd64.iso'
#+end_src

*** find number of cpu's

find the number of cpu's

#+begin_src sh
sysctl kern.sched.topology_spec
#+end_src

*** vm config

#+begin_src sh
doas vi /vm/.templates/ubuntu.conf
#+end_src

#+begin_src conf
loader="grub"
cpu=6
memory=10G
network0_type="virtio-net"
network0_switch="public"
disk0_type="virtio-blk"
disk0_name="disk0.img"
grub_run_partition="2"
grub_run_dir="/grub"
#+end_src

*** vm create

#+begin_src sh
doas vm create -t ubuntu -s 40G ubuntu
#+end_src

** vm install

use the -f option to run the vm in the current terminal

#+begin_src sh
doas vm install -f ubuntu ubuntu-24.04.1-live-server-amd64.iso
#+end_src

*** grub

This will start grub. If the installation CD contains a grub.cfg, a menu will be displayed. If not, the vmlinuz and initrd files must be located and loaded manually:

*** grub ls

grub prompt

#+begin_example
grub>
#+end_example

#+begin_src sh
grub> ls
#+end_src

#+begin_example
(lvm/ubuntu--vg-ubuntu--lv) (hd0) (hd0,gpt3) (hd0,gpt2) (hd0,gpt1) (host)
#+end_example

*** grub ls (hd0,gpt2)

#+begin_src sh
ls (hd0,gpt2)/
#+end_src

#+begin_example
lost+found/ grub/ config-6.8.0-52-generic initrd.img.old vmlinuz.old System.map-6.8.0-52-generic vmlinuz-6.8.0-52-generic initrd.img vmlinuz initrd.img-6.8.0-52-generic
#+end_example

*** grub load vmlinuz initrd

#+begin_src sh
linux (hd0,gpt2)/vmlinuz
initrd (hd0,gpt2)/initrd.img
boot
#+end_src
