{
  "name": "chat-searxng-ollama-file",
  "nodes": [
    {
      "parameters": {
        "options": {
          "systemMessage": "You are a text processing machine. You do not have a persona and are not conversational. Your task is to follow the user's instructions precisely, without deviation, and provide ONLY the requested output. You must never provide commentary or extra information."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        624,
        0
      ],
      "id": "aff32470-a7f4-4906-af07-db31dec0ed4a",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "options": {
          "numResults": 20,
          "pageNumber": 1
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolSearXng",
      "typeVersion": 1,
      "position": [
        848,
        224
      ],
      "id": "70b202be-d58a-48de-8550-5ad2eea0c3dc",
      "name": "SearXNG",
      "credentials": {
        "searXngApi": {
          "id": "IuwhGnlXUgaPMvns",
          "name": "SearXNG account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.3,
      "position": [
        80,
        0
      ],
      "id": "f6a2d97c-2df3-4c0b-a453-524597fbca03",
      "name": "chat message",
      "webhookId": "d4a372ea-f561-455f-9919-c2dedebf9215"
    },
    {
      "parameters": {
        "operation": "toText",
        "sourceProperty": "output",
        "options": {}
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        928,
        0
      ],
      "id": "a2595179-4910-4370-a097-f293cd095718",
      "name": "Convert to File"
    },
    {
      "parameters": {
        "operation": "write",
        "fileName": "=/mnt/data/{{ $('clean query').item.json.cleaned_filename }}.txt",
        "options": {}
      },
      "type": "n8n-nodes-base.readWriteFile",
      "typeVersion": 1,
      "position": [
        1136,
        0
      ],
      "id": "0f27a3a0-3fbe-4494-9af6-2b2b20f771be",
      "name": "write to file"
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
      "typeVersion": 1.3,
      "position": [
        704,
        224
      ],
      "id": "527ef939-d7b5-4b11-a7ac-eea2fcf8989c",
      "name": "Postgres Chat Memory",
      "credentials": {
        "postgres": {
          "id": "CC6D1SBjVBR8QA99",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "model": "llama3.1:8b",
        "options": {
          "temperature": 0
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOllama",
      "typeVersion": 1,
      "position": [
        544,
        224
      ],
      "id": "3123dba5-e361-4802-8ff6-5fc3254b5a10",
      "name": "Ollama Chat Model",
      "credentials": {
        "ollamaApi": {
          "id": "jty16zA69nBAC2F6",
          "name": "Ollama account"
        }
      }
    },
    {
      "parameters": {
        "content": "## Search with searxng and Ollama get the response in a text file",
        "height": 96,
        "width": 400
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        0,
        -112
      ],
      "id": "3f7bb527-e40b-41aa-a18b-33a1f53d96df",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "jsCode": "// Function to clean the query and create the filename\n\n    if (!query) {\n        return 'default-output';\n    }\n    \n    const lowerCaseQuery = query.toLowerCase().trim();\n\n    // 1. Handle 'link:' operator (Example: link:https://spitalfieldslife.com/2024/01/31/at-beppes-cafe/)\n    if (lowerCaseQuery.startsWith('link:')) {\n        let urlPart = query.substring(5).trim();\n        \n        // Remove protocol (http/https)\n        let pathSegment = urlPart.replace(/https?:\\/\\//, '');\n\n        // Split by '/' and get the last part (e.g., 'at-beppes-cafe/')\n        let lastSegment = pathSegment.split('/').filter(s => s).pop();\n        \n        // Remove file extensions (like .html) and remaining dots\n        let cleanedSegment = lastSegment ? lastSegment.replace(/\\.[a-z]{2,5}$/i, '') : '';\n        \n        // Replace any remaining non-alphanumeric with dashes\n        cleanedSegment = cleanedSegment.replace(/[^a-z0-9-]/gi, '-'); \n        \n        // Final cleanup: remove multiple dashes and trim\n        return cleanedSegment.replace(/-{2,}/g, '-').replace(/^-|-$/g, '') || 'link-search';\n    }\n\n    // 2. Handle 'site:' operator (Example: site:https://spitalfieldslife.com)\n    if (lowerCaseQuery.startsWith('site:')) {\n        let urlPart = query.substring(5).trim();\n        \n        // Remove protocol (http/https), 'www.', and trailing slash\n        urlPart = urlPart.replace(/https?:\\/\\//, '').replace(/^www\\./, '').replace(/\\/$/, '');\n        \n        // Split at the first dot and take the domain name (spitalfieldslife)\n        let domainName = urlPart.split('.')[0];\n        \n        return domainName.toLowerCase();\n    }\n\n    // 3. Handle General Text Prompt (Example: beppes cafe london)\n    // Replace all non-alphanumeric (except space) with dashes, remove multiple dashes, and trim.\n    let cleanedText = lowerCaseQuery;\n    // Replace all non-alphanumeric or space with dash\n    cleanedText = cleanedText.replace(/[^a-z0-9\\s]/g, '-'); \n    // Replace spaces with single dash\n    cleanedText = cleanedText.replace(/\\s+/g, '-');\n    // Final cleanup: remove multiple dashes and trim\n    cleanedText = cleanedText.replace(/-{2,}/g, '-').replace(/^-|-$/g, '');\n\n    return cleanedText;\n}\n\n// ----------------------------------------------------\n// CRUCIAL CHANGE: Use the correct input variable\n// ----------------------------------------------------\nconst originalQuery = $input.first().json.chatInput;\n\n// Process the query to get the clean filename base\nconst cleanedFilename = cleanQueryToFilename(originalQuery);\n\n// Return the original item with the new field added\nreturn [{\n    ...$json,\n    cleaned_filename: cleanedFilename\n}];\n\n\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        256,
        0
      ],
      "id": "2b8af9e9-c7e5-4ecd-9c2e-fad9e1d9054a",
      "name": "clean query"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "dbc98f6a-665e-4a5a-aa47-85da65de4e2c",
              "name": "chatInput",
              "value": "={{ $json.chatInput }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        432,
        0
      ],
      "id": "92e18a54-a810-40ad-b99e-49af03d0b978",
      "name": "search query"
    }
  ],
  "pinData": {},
  "connections": {
    "SearXNG": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Convert to File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "chat message": {
      "main": [
        [
          {
            "node": "clean query",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to File": {
      "main": [
        [
          {
            "node": "write to file",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Postgres Chat Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Ollama Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "clean query": {
      "main": [
        [
          {
            "node": "search query",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "search query": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "8cbad338-f5a6-43bf-8353-ffc8f6d061d1",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "ee718081dceace9a4bccc1cc08d3d8ae41f44d3a86e1399dd1a159c3f3ae7e8e"
  },
  "id": "6tjm9Ah3EjTDfrbd",
  "tags": []
}