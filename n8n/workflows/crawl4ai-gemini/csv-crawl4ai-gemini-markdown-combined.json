{
  "name": "csv-crawl4ai-gemini-markdown-combined",
  "nodes": [
    {
      "parameters": {
        "binaryPropertyName": "data0",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        -1056,
        992
      ],
      "id": "933f7c59-4453-48b5-b498-4a22801ea992",
      "name": "Extract from csv"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -384,
        896
      ],
      "id": "8357e648-8cb3-49cc-b72b-f49b5ccd6684",
      "name": "Loop Over Items",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "418644c8-dbc8-4b0f-a8e3-ede524853dae",
              "name": "demoted_markdown",
              "value": "=# [{{ $('Loop Over Items').item.json.title }}]({{ $('If').item.json.url }})\n{{ $json.demoted_markdown }}\n\n\n",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        720,
        336
      ],
      "id": "5796a14a-d62f-490f-919d-4e0eec23c68f",
      "name": "set output"
    },
    {
      "parameters": {
        "operation": "write",
        "fileName": "=/mnt/data/{{ $('upload file').item.json.files[0].fileName.split('.')[0] }}.md",
        "dataPropertyName": "=data",
        "options": {
          "append": true
        }
      },
      "type": "n8n-nodes-base.readWriteFile",
      "typeVersion": 1,
      "position": [
        496,
        720
      ],
      "id": "ba5fc7fd-5fdd-43af-8331-7369331cac92",
      "name": "write to file"
    },
    {
      "parameters": {
        "operation": "toText",
        "sourceProperty": "demoted_markdown",
        "options": {}
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        272,
        720
      ],
      "id": "e282b990-4225-47a9-a979-56ab69421624",
      "name": "Convert to File"
    },
    {
      "parameters": {
        "options": {
          "allowFileUploads": true,
          "allowedFilesMimeTypes": "text/csv"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.3,
      "position": [
        -1280,
        992
      ],
      "id": "d94cf49a-3d75-47be-bd11-d553a348803d",
      "name": "upload file",
      "webhookId": "ab49ec84-3410-4e27-8be5-cf74294ee283",
      "notesInFlow": false
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://host.docker.internal:11235/md",
        "sendBody": true,
        "specifyBody": "=json",
        "bodyParameters": {
          "parameters": [
            {}
          ]
        },
        "jsonBody": "={\n  \"url\": \"{{ $json.url }}\",\n  \"crawler_config\": {\n    \"type\": \"CrawlerRunConfig\",\n    \"params\": {\n      \"content_filters\": [\n        {\n          \"type\": \"PruningContentFilter\",\n          \"threshold\": 0.5,\n          \"threshold_type\": \"fixed\",\n          \"min_word_threshold\": 75 \n        }\n      ],\n      \"markdown_generator\": {\n        \"type\": \"DefaultMarkdownGenerator\"\n      }\n    }\n  }\n}",
        "options": {
          "response": {
            "response": {}
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -320,
        400
      ],
      "id": "9d4e0d67-8c23-4d1b-81cf-be056b43bd54",
      "name": "crawl4ai",
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "content": "## Click the paper clip icon in the chat to upload a csv file with urls, type start and press return use crawl4ai save the results to a single markdown file",
        "height": 176,
        "width": 448
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -1408,
        768
      ],
      "id": "4943d5e8-e575-47e6-95c0-7eb85285d747",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "4064ebbe-058a-4b2a-a7fe-c8cd444e5983",
              "leftValue": "={{ $json.markdown }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            },
            {
              "id": "9b12b0af-1a94-4cb5-993c-e49d1490ac50",
              "leftValue": "={{ $json.markdown }}",
              "rightValue": "We cannot provide a description for this page right now",
              "operator": {
                "type": "string",
                "operation": "notContains"
              }
            },
            {
              "id": "fd36d578-d256-443a-b9a0-d18fcf707699",
              "leftValue": "={{ $json.markdown }}",
              "rightValue": "\"\\n\"",
              "operator": {
                "type": "string",
                "operation": "notEquals"
              }
            },
            {
              "id": "ba8f54c2-47f1-4e1f-a190-114beef829ba",
              "leftValue": "={{ $json.markdown.length }}",
              "rightValue": 100,
              "operator": {
                "type": "number",
                "operation": "gt"
              }
            },
            {
              "id": "e8681786-e87a-4b27-be24-d79c9637d63e",
              "leftValue": "={{ $json.markdown.length }}",
              "rightValue": 20000,
              "operator": {
                "type": "number",
                "operation": "lt"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -80,
        384
      ],
      "id": "29932f5b-5180-45fe-a255-42f0b8e8076e",
      "name": "If",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        496,
        528
      ],
      "id": "29c595ed-e374-4986-9f4c-c724b195614a",
      "name": "no op"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        944,
        656
      ],
      "id": "f0c8072a-fff3-4100-8e70-8a1233ade99d",
      "name": "Accumulate Data"
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "import re\n\n# The user explicitly stated the input field for the markdown content MUST be called 'markdown'.\n# We will strictly use items[0].json[\"markdown\"]. This assumes the preceding node\n# in the workflow has named its output field exactly 'markdown'.\n# If 'markdown' is not present, this will raise an error, enforcing the user's requirement.\nmarkdown_content = items[0].json[\"output\"]\n\n# 1. Split the content into lines\n# We use splitlines(True) to keep the newline characters, which is crucial for\n# reconstructing the markdown file correctly later.\nlines = markdown_content.splitlines(True)\n\n# 2. Check the first non-empty line with a header\ndemote = False\n# Regex to find markdown headers (starting with one or more '#' followed by space)\nheader_regex = r\"^(#+)\\s+.*\" \nfirst_header_level = 7 # Start higher than H6\n\nfor line in lines:\n    line = line.strip()\n    if line: # Check if the line is not empty (e.g. not just a newline character)\n        match = re.match(header_regex, line)\n        if match:\n            # Found the first header. Count the number of hashes.\n            hashes = match.group(1)\n            first_header_level = len(hashes)\n            \n            # Check if demotion is needed (i.e., if the first header is H1 or H2)\n            # We want to demote if the top-level header is <= H2 (level 2)\n            if first_header_level <= 2:\n                demote = True\n            break # Stop checking after the first header is found\n\nnew_lines = []\n\nif demote:\n    for line in lines:\n        match = re.match(header_regex, line)\n        if match:\n            hashes = match.group(1)\n            current_level = len(hashes)\n                        \n            # Stop demoting at H6 (level 6). If current_level is < 6, we demote it.\n            if current_level < 6:\n                # Prepend one hash to the line to demote it (e.g., # -> ##, ## -> ###)\n                new_line = '#' + line\n            else:\n                # Keep H6 and below as is\n                new_line = line\n        else:\n            # Not a header line, keep it as is\n            new_line = line\n                    \n        new_lines.append(new_line)\nelse:\n    # If the demotion condition is NOT met (first header was H3 or higher), keep all lines original\n    new_lines = lines\n\n# 3. Join the lines back together\ndemoted_markdown = \"\".join(new_lines)\n\n# 4. Write the demoted content back to a new field named 'demoted_markdown'.\n# We maintain all original fields from the input item and add the new one.\noutput_item = {**items[0].json, \"demoted_markdown\": demoted_markdown}\n\nreturn [output_item]\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        496,
        336
      ],
      "id": "34fdb060-7dd7-4639-b5d3-7742ea50042b",
      "name": "Code in Python (Beta)"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "7f811a1e-57d4-4e9d-82e8-8d54638711d9",
              "name": "title",
              "value": "={{ $json.title }}",
              "type": "string"
            },
            {
              "id": "364ff861-5b02-4c82-9114-cb239c5c5080",
              "name": "url",
              "value": "={{ $json.url }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -832,
        992
      ],
      "id": "427d191d-86f1-496f-a433-4464b25870fb",
      "name": "csv headers"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        -384,
        1088
      ],
      "id": "3247e76f-312c-4b03-b0c7-30bc909842da",
      "name": "url empty"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "740e31b3-4655-4690-99e0-f946847edf43",
              "leftValue": "={{ $json.url }}",
              "rightValue": "null",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -608,
        992
      ],
      "id": "021b6e75-d6e0-4d43-aae6-2c8b8124f204",
      "name": "If url"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "c83060bf-3105-481b-aea4-5772ac5d9a04",
              "leftValue": "={{ $json.demoted_markdown }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -160,
        768
      ],
      "id": "984ab238-05c5-4811-bcac-8701ad43a67a",
      "name": "if markdown"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        272,
        912
      ],
      "id": "cb7b27d0-bd47-40d6-91e6-07814b823326",
      "name": "no markdown"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Perform the following steps on the provided markdown content, which is the body of a web article:\n1. Extract the main body text, **starting from the article's main content**. Exclude all navigational elements, footers, sidebars, advertisements, image alt text, figcaption text, and any other irrelevant boilerplate or website shell elements.\n2. **Preserve all original Markdown formatting** within the article's body, including all headings (e.g., #, ##, ###), lists, and links.\n3. Your final output must be **ONLY** the cleaned text from step 1. Do not include any commentary or extra text outside of the article's body content.\n\nmarkdown content:\n{{ $json.markdown }}",
        "options": {
          "systemMessage": "You are a text processing machine. You do not have a persona and are not conversational. Your task is to follow the user's instructions precisely, without deviation, and provide ONLY the requested output. You must never provide commentary or extra information."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        128,
        288
      ],
      "id": "85630421-ee0a-462c-849f-2e23d698b74d",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "options": {
          "temperature": 0
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        96,
        480
      ],
      "id": "7c1a77ae-b314-4cd2-b1f3-9330d2820f6d",
      "name": "Google Gemini Chat Model",
      "credentials": {
        "googlePalmApi": {
          "id": "znmwPMJRL7xlK8cc",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
      "typeVersion": 1.3,
      "position": [
        240,
        496
      ],
      "id": "b43b1e17-4d03-422e-90d8-9f8c7fbefab0",
      "name": "Postgres Chat Memory",
      "credentials": {
        "postgres": {
          "id": "CC6D1SBjVBR8QA99",
          "name": "Postgres account"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "Extract from csv": {
      "main": [
        [
          {
            "node": "csv headers",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [
          {
            "node": "if markdown",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "crawl4ai",
            "type": "main",
            "index": 0
          }
        ],
        []
      ]
    },
    "set output": {
      "main": [
        [
          {
            "node": "Accumulate Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to File": {
      "main": [
        [
          {
            "node": "write to file",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "upload file": {
      "main": [
        [
          {
            "node": "Extract from csv",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "crawl4ai": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "no op",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "no op": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Accumulate Data": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code in Python (Beta)": {
      "main": [
        [
          {
            "node": "set output",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "csv headers": {
      "main": [
        [
          {
            "node": "If url",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "write to file": {
      "main": [
        []
      ]
    },
    "url empty": {
      "main": [
        []
      ]
    },
    "If url": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "url empty",
            "type": "main",
            "index": 0
          }
        ],
        []
      ]
    },
    "if markdown": {
      "main": [
        [
          {
            "node": "Convert to File",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "no markdown",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Code in Python (Beta)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Postgres Chat Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "ee25aff1-331d-4983-850b-43614759f32e",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "ee718081dceace9a4bccc1cc08d3d8ae41f44d3a86e1399dd1a159c3f3ae7e8e"
  },
  "id": "1iGc9wn8Chpu0lhu",
  "tags": []
}