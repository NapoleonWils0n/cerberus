{
  "name": "csv-crawl4ai-markdown-files",
  "nodes": [
    {
      "parameters": {
        "binaryPropertyName": "data0",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        -624,
        656
      ],
      "id": "95703a75-023d-4c7e-8ec4-7b43a6bf9e4b",
      "name": "Extract from csv"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        48,
        512
      ],
      "id": "597ec9d9-34f4-494b-9a74-d18c46815f39",
      "name": "Loop Over Items",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "418644c8-dbc8-4b0f-a8e3-ede524853dae",
              "name": "demoted_markdown",
              "value": "=# [{{ $('Loop Over Items').item.json.title }}]({{ $('If').item.json.url }})\n{{ $json.demoted_markdown }}\n",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        944,
        224
      ],
      "id": "51f67696-52ac-4b23-95c6-cb07bd633261",
      "name": "set output"
    },
    {
      "parameters": {
        "operation": "write",
        "fileName": "=/mnt/data/{{ $('sanitize title for file name').item.json.sanitizedTitle }}.md",
        "dataPropertyName": "=data",
        "options": {
          "append": false
        }
      },
      "type": "n8n-nodes-base.readWriteFile",
      "typeVersion": 1,
      "position": [
        1840,
        512
      ],
      "id": "e8c87cd0-e277-4a4d-9457-56e245864cfe",
      "name": "write to file"
    },
    {
      "parameters": {
        "operation": "toText",
        "sourceProperty": "demoted_markdown",
        "options": {}
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        1392,
        224
      ],
      "id": "1f4ff464-266c-49d5-881b-2808785f6b3d",
      "name": "Convert to File"
    },
    {
      "parameters": {
        "options": {
          "allowFileUploads": true,
          "allowedFilesMimeTypes": "text/csv"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.3,
      "position": [
        -848,
        656
      ],
      "id": "fe15f806-7fed-489a-930d-ee76b38c1c39",
      "name": "upload file",
      "webhookId": "9211ad05-c175-4078-baec-53ef81c6990b",
      "notesInFlow": false
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://host.docker.internal:11235/md",
        "sendBody": true,
        "specifyBody": "=json",
        "bodyParameters": {
          "parameters": [
            {}
          ]
        },
        "jsonBody": "={\n  \"url\": \"{{ $json.url }}\",\n  \"crawler_config\": {\n    \"type\": \"CrawlerRunConfig\",\n    \"params\": {\n      \"content_filters\": [\n        {\n          \"type\": \"PruningContentFilter\",\n          \"threshold\": 0.5,\n          \"threshold_type\": \"fixed\",\n          \"min_word_threshold\": 75 \n        }\n      ],\n      \"markdown_generator\": {\n        \"type\": \"DefaultMarkdownGenerator\"\n      }\n    }\n  }\n}",
        "options": {
          "response": {
            "response": {}
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        272,
        272
      ],
      "id": "79b982f7-879d-498f-b8b3-1711cebf5c50",
      "name": "crawl4ai",
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "content": "## Click the paper clip icon in the chat to upload a csv file with urls, type start and press return use crawl4ai save the results to text files",
        "height": 176,
        "width": 448
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -960,
        416
      ],
      "id": "a4543a92-98f2-4cf9-8668-8cab7fea4e56",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "jsCode": "for (const item of items) {\n  // Access the 'title' from the 'Loop Over Items' node\n  let title = $('Loop Over Items').first().json.title;\n  \n  // Sanitize the title\n  let sanitizedTitle = title\n    .replace(/[/\\?<>\\\\:*|\"\\.\\r\\n]/g, '-') // Replaces invalid characters, including periods and newlines, with a hyphen\n    .replace(/^-+|-+$/g, ''); // Removes leading or trailing hyphens\n  \n  // Create a new property on the item with the sanitized title\n  item.json.sanitizedTitle = sanitizedTitle;\n}\n\nreturn items;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1168,
        224
      ],
      "id": "6a033857-6cd5-4e57-bba4-812f8c05249f",
      "name": "sanitize title for file name"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "c1c0f7cc-a0f7-4f9b-a2dd-0175077ea767",
              "leftValue": "={{ $json.markdown }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            },
            {
              "id": "09712590-015e-4e8e-85cd-6de73444574e",
              "leftValue": "={{ $json.markdown }}",
              "rightValue": "We cannot provide a description for this page right now",
              "operator": {
                "type": "string",
                "operation": "notContains"
              }
            },
            {
              "id": "a9430359-776d-432c-80ea-2a0ce6b56dee",
              "leftValue": "={{ $json.markdown }}",
              "rightValue": "\"\\n\"",
              "operator": {
                "type": "string",
                "operation": "notEquals"
              }
            },
            {
              "id": "ba8f54c2-47f1-4e1f-a190-114beef829ba",
              "leftValue": "={{ $json.markdown.length }}",
              "rightValue": 100,
              "operator": {
                "type": "number",
                "operation": "gt"
              }
            },
            {
              "id": "e8681786-e87a-4b27-be24-d79c9637d63e",
              "leftValue": "={{ $json.markdown.length }}",
              "rightValue": 20000,
              "operator": {
                "type": "number",
                "operation": "lt"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        496,
        272
      ],
      "id": "4ff9df05-07bd-4d9a-a96c-8e0acaeb63e6",
      "name": "If"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        720,
        416
      ],
      "id": "9110dda7-1a54-4670-8052-2c3f3d3cf99f",
      "name": "no op"
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "import re\n\n# The user explicitly stated the input field for the markdown content MUST be called 'markdown'.\n# We will strictly use items[0].json[\"markdown\"]. This assumes the preceding node\n# in the workflow has named its output field exactly 'markdown'.\n# If 'markdown' is not present, this will raise an error, enforcing the user's requirement.\nmarkdown_content = items[0].json[\"markdown\"]\n\n# 1. Split the content into lines\n# We use splitlines(True) to keep the newline characters, which is crucial for\n# reconstructing the markdown file correctly later.\nlines = markdown_content.splitlines(True)\n\n# 2. Check the first non-empty line with a header\ndemote = False\n# Regex to find markdown headers (starting with one or more '#' followed by space)\nheader_regex = r\"^(#+)\\s+.*\" \nfirst_header_level = 7 # Start higher than H6\n\nfor line in lines:\n    line = line.strip()\n    if line: # Check if the line is not empty (e.g. not just a newline character)\n        match = re.match(header_regex, line)\n        if match:\n            # Found the first header. Count the number of hashes.\n            hashes = match.group(1)\n            first_header_level = len(hashes)\n            \n            # Check if demotion is needed (i.e., if the first header is H1 or H2)\n            # We want to demote if the top-level header is <= H2 (level 2)\n            if first_header_level <= 2:\n                demote = True\n            break # Stop checking after the first header is found\n\nnew_lines = []\n\nif demote:\n    for line in lines:\n        match = re.match(header_regex, line)\n        if match:\n            hashes = match.group(1)\n            current_level = len(hashes)\n                        \n            # Stop demoting at H6 (level 6). If current_level is < 6, we demote it.\n            if current_level < 6:\n                # Prepend one hash to the line to demote it (e.g., # -> ##, ## -> ###)\n                new_line = '#' + line\n            else:\n                # Keep H6 and below as is\n                new_line = line\n        else:\n            # Not a header line, keep it as is\n            new_line = line\n                    \n        new_lines.append(new_line)\nelse:\n    # If the demotion condition is NOT met (first header was H3 or higher), keep all lines original\n    new_lines = lines\n\n# 3. Join the lines back together\ndemoted_markdown = \"\".join(new_lines)\n\n# 4. Write the demoted content back to a new field named 'demoted_markdown'.\n# We maintain all original fields from the input item and add the new one.\noutput_item = {**items[0].json, \"demoted_markdown\": demoted_markdown}\n\nreturn [output_item]\n\n\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        720,
        224
      ],
      "id": "1fd1b948-71e2-40ca-972f-d82ed5277abb",
      "name": "Code in Python (Beta)"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "ac6a171b-5550-4974-ae6c-57ba2741e2bc",
              "name": "title",
              "value": "={{ $json.title }}",
              "type": "string"
            },
            {
              "id": "9bdb02ee-f1ce-4529-926c-72b478de761e",
              "name": "url",
              "value": "={{ $json.url }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -400,
        656
      ],
      "id": "3760a279-60ed-420d-905c-b5170382b372",
      "name": "csv headers"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "f1a7d870-9ff4-47bf-929e-44acfbd6bf53",
              "leftValue": "={{ $json.url }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -176,
        656
      ],
      "id": "11f8f580-4931-463a-8709-15a6ec0e54b6",
      "name": "if url"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        48,
        704
      ],
      "id": "d0b1efa5-a352-4e77-8f9e-607b57d11950",
      "name": "url empty"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "d012900c-f3ab-430c-80b5-1dbee6ef820c",
              "leftValue": "={{ $('Code in Python (Beta)').item.json.demoted_markdown }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1616,
        224
      ],
      "id": "166b1be7-71d2-4c58-b2d6-cae8c65a858a",
      "name": "if markdown"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        1840,
        176
      ],
      "id": "74d30f81-ed04-4bee-8ecd-689fb6748f6e",
      "name": "no markdown"
    }
  ],
  "pinData": {},
  "connections": {
    "Extract from csv": {
      "main": [
        [
          {
            "node": "csv headers",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [],
        [
          {
            "node": "crawl4ai",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "set output": {
      "main": [
        [
          {
            "node": "sanitize title for file name",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to File": {
      "main": [
        [
          {
            "node": "if markdown",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "write to file": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "upload file": {
      "main": [
        [
          {
            "node": "Extract from csv",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "crawl4ai": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ],
        []
      ]
    },
    "sanitize title for file name": {
      "main": [
        [
          {
            "node": "Convert to File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Code in Python (Beta)",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "no op",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "no op": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code in Python (Beta)": {
      "main": [
        [
          {
            "node": "set output",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "csv headers": {
      "main": [
        [
          {
            "node": "if url",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "if url": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "url empty",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "if markdown": {
      "main": [
        [
          {
            "node": "write to file",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "no markdown",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "973b51f3-7f6b-4967-b908-85b9df6fc4f6",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "ee718081dceace9a4bccc1cc08d3d8ae41f44d3a86e1399dd1a159c3f3ae7e8e"
  },
  "id": "R8YYTnCqhHPtbpFK",
  "tags": []
}