{
  "name": "csv-scrape-gemini-files",
  "nodes": [
    {
      "parameters": {
        "fileSelector": "={{ $json.chatInput }}",
        "options": {}
      },
      "type": "n8n-nodes-base.readWriteFile",
      "typeVersion": 1,
      "position": [
        -4384,
        1328
      ],
      "id": "89e6dde1-ae26-475c-b3a6-c86f7a9c03d2",
      "name": "read from csv"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        -4160,
        1328
      ],
      "id": "aea74a61-bfc1-452c-8fb3-afee77d6b196",
      "name": "Extract from csv"
    },
    {
      "parameters": {
        "url": "={{ $json.url }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.0.0 Safari/537.36"
            }
          ]
        },
        "options": {
          "response": {
            "response": {
              "fullResponse": true
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -3648,
        1024
      ],
      "id": "a0b6db97-7011-42af-b852-4228cb148a64",
      "name": "HTTP Request",
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -3872,
        1312
      ],
      "id": "950fcd7a-a18d-4f8e-9e60-5d8c8d0b39dc",
      "name": "Loop Over Items",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Perform the following steps on the provided HTML content:\n1. Extract the main body text, excluding all navigation, footers, headers, ads, and other irrelevant elements.\n2. From the extracted body text, create a single-paragraph summary of 250 words or less.\n3. Your output must be ONLY the summary text from step 2. Do not include any titles, introductions, or concluding phrases.\n\nHTML content:\n{{ $json.bodyText }}",
        "options": {
          "systemMessage": "You are a text processing machine. You do not have a persona and are not conversational. Your task is to follow the user's instructions precisely, without deviation, and provide ONLY the requested output. You must never provide commentary or extra information."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        -2976,
        832
      ],
      "id": "5e1b0a8b-f89f-499a-95a3-451f1a913167",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "sessionid"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        -2832,
        1056
      ],
      "id": "df8875e8-b92d-48bb-b3fc-79e0f13fb418",
      "name": "Simple Memory"
    },
    {
      "parameters": {
        "operation": "extractHtmlContent",
        "extractionValues": {
          "values": [
            {
              "key": "title",
              "cssSelector": "title"
            },
            {
              "key": "bodyText",
              "cssSelector": "body"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.html",
      "typeVersion": 1.2,
      "position": [
        -3200,
        832
      ],
      "id": "a5553a8f-6b72-4ec8-9586-a8ce5230cb40",
      "name": "extract html",
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "418644c8-dbc8-4b0f-a8e3-ede524853dae",
              "name": "final_output",
              "value": "={{ $('Loop Over Items').item.json.title }}\n\n{{ $('Loop Over Items').item.json.url }}\n\n{{ $json.output }}\n",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -2624,
        832
      ],
      "id": "576b1950-bce3-449e-8fc0-a5bb3259bc22",
      "name": "set output"
    },
    {
      "parameters": {
        "operation": "write",
        "fileName": "=/home/djwilcox/Desktop/{{ $('Code').item.json.sanitizedTitle }}.txt",
        "dataPropertyName": "=data",
        "options": {
          "append": false
        }
      },
      "type": "n8n-nodes-base.readWriteFile",
      "typeVersion": 1,
      "position": [
        -1952,
        1104
      ],
      "id": "75ca518a-5851-4168-a205-d0cf07156a11",
      "name": "write to file"
    },
    {
      "parameters": {
        "operation": "toText",
        "sourceProperty": "final_output",
        "options": {}
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        -2176,
        832
      ],
      "id": "4c092127-9726-4b1f-b03d-2ddbce26e34a",
      "name": "Convert to File"
    },
    {
      "parameters": {
        "options": {
          "temperature": 0
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        -2960,
        1056
      ],
      "id": "0bc7cd58-9e25-4058-a247-7ecc77c436a2",
      "name": "Google Gemini Chat Model",
      "credentials": {
        "googlePalmApi": {
          "id": "TOjrSUDwcdx8wf7N",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "f79209ef-c195-4d50-86bd-403a3912d56d",
              "leftValue": "={{ $json.headers['content-type'] }}",
              "rightValue": "text/html",
              "operator": {
                "type": "string",
                "operation": "startsWith"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -3424,
        928
      ],
      "id": "e47222da-a9ce-4f6e-810d-7f62c5684725",
      "name": "If content type"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        -3424,
        1120
      ],
      "id": "6edc4d66-3221-4816-97d7-fa21fdcce99b",
      "name": "status error"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        -3200,
        1024
      ],
      "id": "fe8811c5-28a0-4f37-b4e1-acd7fabb0379",
      "name": "wrong content type"
    },
    {
      "parameters": {
        "jsCode": "for (const item of items) {\n  // Access the 'title' from the 'extract html' node\n  let title = $('extract html').first().json.title;\n  \n  // Sanitize the title\n  let sanitizedTitle = title\n    .replace(/[/\\?<>\\\\:*|\"\\.\\r\\n]/g, '-') // Replaces invalid characters, including periods and newlines, with a hyphen\n    .replace(/^-+|-+$/g, ''); // Removes leading or trailing hyphens\n  \n  // Create a new property on the item with the sanitized title\n  item.json.sanitizedTitle = sanitizedTitle;\n}\n\nreturn items;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2400,
        832
      ],
      "id": "09030ce2-4c04-4d88-97da-6e3755717c91",
      "name": "Code"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.3,
      "position": [
        -4640,
        1328
      ],
      "id": "4bc50859-cb1b-4926-b7c4-a9bb0e4013cc",
      "name": "file path",
      "webhookId": "b8a8e3fd-d2da-4378-a970-51b2827e0c4b",
      "notesInFlow": false
    },
    {
      "parameters": {
        "content": "## Add the full file path to the csv file in the file path node",
        "height": 240,
        "width": 352
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -4752,
        1072
      ],
      "id": "ca6bb923-9ed7-4779-926b-016331d0c482",
      "name": "Sticky Note"
    }
  ],
  "pinData": {},
  "connections": {
    "read from csv": {
      "main": [
        [
          {
            "node": "Extract from csv",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from csv": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "If content type",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "status error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [],
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "set output",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "extract html": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "set output": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to File": {
      "main": [
        [
          {
            "node": "write to file",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "write to file": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "status error": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If content type": {
      "main": [
        [
          {
            "node": "extract html",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "wrong content type",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "wrong content type": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Convert to File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "file path": {
      "main": [
        [
          {
            "node": "read from csv",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "8efa54a7-bb37-4011-9fe4-45538cfc4c6c",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "4f5f19f3a1851293801abceb688997c09f46ac20746fee141548f02c452c2105"
  },
  "id": "CxEL9QWJ8vkAkItz",
  "tags": []
}