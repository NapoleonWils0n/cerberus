#+STARTUP: content
* n8n podman
** podman install debian

#+begin_src sh
doas apt install podman podman-compose
#+end_src

** open port 5678

make sure to open port 5678 in your firewall

** n8n git repo 

[[https://docs.n8n.io/hosting/installation/server-setups/docker-compose/]]

[[https://github.com/n8n-io/n8n-hosting/tree/main/docker-compose/withPostgres]]

** clone the n8n git repo

#+begin_src sh
git clone https://github.com/n8n-io/n8n-hosting.git
#+end_src

this create a n8n-hosting directory

** create the n8n directory

#+begin_src sh
mkdir -p ~/podman/n8n
#+end_src

** withPostgres

copy the contents of the withPostgres into the n8n directory

#+begin_src sh
cp n8n-hosting/docker-compose/withPostgres/* ~/podman/n8n
#+end_src

** create the data directory

create the data directory for local file access

#+begin_src sh
mkdir -p ~/podman/n8n/data
#+end_src

change the permissions on the data directory

#+begin_src sh
chmod 777 data
#+end_src

use podman unshare to make files in the data directory editable by our group

#+begin_src sh
podman unshare chown -R :users data
#+end_src

#+begin_src sh
podman unshare setfacl -d -m g::rwx data
#+end_src

** docker-compose.yml

#+begin_src yaml
version: '3.8'

volumes:
  db_storage:
  n8n_storage:

services:
  postgres:
    image: postgres:16
    restart: always
    environment:
      - POSTGRES_USER
      - POSTGRES_PASSWORD
      - POSTGRES_DB
      - POSTGRES_NON_ROOT_USER
      - POSTGRES_NON_ROOT_PASSWORD
    volumes:
      - db_storage:/var/lib/postgresql/data
      - ./init-data.sh:/docker-entrypoint-initdb.d/init-data.sh
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -h localhost -U ${POSTGRES_USER} -d ${POSTGRES_DB}']
      interval: 5s
      timeout: 5s
      retries: 10

  n8n:
    image: docker.n8n.io/n8nio/n8n
    restart: always
    # run id on the command line to check your uid and gid
    # and change user: "1000:100" below to match if needed
    user: "1000:100"
    environment:
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=${POSTGRES_DB}
      - DB_POSTGRESDB_USER=${POSTGRES_NON_ROOT_USER}
      - DB_POSTGRESDB_PASSWORD=${POSTGRES_NON_ROOT_PASSWORD}
      - WEBHOOK_URL=http://localhost:5678/      
      - N8N_EDITOR_BASE_URL=http://localhost:5678/ 
    ports:
      - 5678:5678
    links:
      - postgres
    volumes:
      - n8n_storage:/home/node/.n8n
      - ./data:/mnt/data
    depends_on:
      postgres:
        # FIX: Changed to the more lenient condition to prevent hanging
        condition: service_started
#+end_src

** init-data.sh

#+begin_src sh
#!/bin/bash
set -e;


if [ -n "${POSTGRES_NON_ROOT_USER:-}" ] && [ -n "${POSTGRES_NON_ROOT_PASSWORD:-}" ]; then
	psql -v ON_ERROR_STOP=1 --username "$POSTGRES_USER" --dbname "$POSTGRES_DB" <<-EOSQL
		CREATE USER ${POSTGRES_NON_ROOT_USER} WITH PASSWORD '${POSTGRES_NON_ROOT_PASSWORD}';
		GRANT ALL PRIVILEGES ON DATABASE ${POSTGRES_DB} TO ${POSTGRES_NON_ROOT_USER};
		GRANT CREATE ON SCHEMA public TO ${POSTGRES_NON_ROOT_USER};
	EOSQL
else
	echo "SETUP INFO: No Environment variables given!"
fi
#+end_src

** edit the .env file

edit the .env file

#+begin_src sh
vi ~/podman/n8n/.env
#+end_src

change the user and passwords

we also add the keep-id option to the .env

#+begin_src sh
PODMAN_USERNS=keep-id
#+end_src

.env

#+begin_src sh
POSTGRES_USER=changeUser
POSTGRES_PASSWORD=changePassword
POSTGRES_DB=n8n

POSTGRES_NON_ROOT_USER=changeUser
POSTGRES_NON_ROOT_PASSWORD=changePassword

PODMAN_USERNS=keep-id
#+end_src

use openssl to create the passwords

Generate a secret for POSTGRES_PASSWORD

#+begin_src sh
openssl rand -hex 16 
#+end_src

Generate a secret for POSTGRES_NON_ROOT_PASSWORD

#+begin_src sh
openssl rand -hex 16 
#+end_src

** n8n start

start n8n

#+begin_src sh
podman-compose up -d
#+end_src

** license key

disable ublock origin to enter the license key

** PostgreSQL set up

settings from the .env file

host

#+begin_example
postgres
#+end_example

database

settings from

#+begin_example
POSTGRES_DB=
#+end_example

#+begin_example
database name
#+end_example

user

settings from

#+begin_example
POSTGRES_NON_ROOT_USER=
#+end_example

#+begin_example
username
#+end_example

password

password from

#+begin_example
POSTGRES_NON_ROOT_PASSWORD=
#+end_example

#+begin_example
password
#+end_example

** n8n stop

stop n8n

#+begin_src sh
podman-compose down
#+end_src

** searxng api

to connect to searxng running in a podman container

you need to use a docker url 

#+begin_example
http://host.docker.internal:8080
#+end_example

this connects to searxng running on

#+begin_example
http://localhost:8080
#+end_example

** ollama

#+begin_example
http://host.docker.internal:11434
#+end_example
