#+STARTUP: content
* distrobox
** distrobox github

[[https://github.com/89luca89/distrobox]]

[[https://fedoramagazine.org/run-distrobox-on-fedora-linux/]]

** distrobox install

+ fedora

#+begin_src sh
sudo dnf install distrobox
#+end_src

** distrobox create
*** arch linux
*** create the arch container

#+begin_src sh
distrobox create -n arch -i archlinux:latest
#+end_src

*** enter the arch container

#+begin_src sh
distrobox enter arch
#+end_src

*** update repos

#+begin_src sh
sudo pacman -Syy
#+end_src

*** install vi

#+begin_src sh
sudo pacman -S vi
#+end_src

*** edit /etc/locale.gen

#+begin_src sh
sudo vi /etc/locale.gen
#+end_src

add the following code to the file and save

#+begin_src conf
C.UTF-8 UTF-8
en_GB.UTF-8 UTF-8
#+end_src

*** edit /etc/locale.conf

#+begin_src sh
sudo vi /etc/locale.conf
#+end_src

add the following code to the file and save

#+begin_src conf
LC_COLLATE=C.UTF-8
LANG=en_GB.UTF-8 UTF-8
#+end_src

*** locale-gen

generate the locale file

#+begin_src sh
sudo locale-gen
#+end_src

*** check the locale

#+begin_src sh
locale -a
#+end_src

*** activate locale

#+begin_src sh
source /etc/profile
#+end_src

*** pacman-key

generate pacman key

#+begin_src sh
sudo pacman-key --init
#+end_src

update

#+begin_src sh
sudo pacman -Syy
#+end_src

*** install yay
**** install the required dependencies

#+begin_src sh
sudo pacman -S --needed base-devel git
#+end_src

**** switch to the desktop

#+begin_src sh
cd ~/Desktop
#+end_src

**** clone the yay git repo

#+begin_src sh
git clone https://aur.archlinux.org/yay.git
#+end_src

**** cd into the yay git repo

#+begin_src sh
cd yay
#+end_src

**** build yay

#+begin_src sh
makepkg -si
#+end_src

press y at the prompts

**** yay first Use

Development packages upgrade

#+begin_src sh
yay -Y --gendb
#+end_src

to generate a development package database for *-git packages that were installed without yay. This command should only be run once.

#+begin_src sh
yay -Syu --devel 
#+end_src

will then check for development package updates

#+begin_src sh
yay -Y --devel --save
#+end_src

to make development package updates permanently enabled (yay and yay -Syu will then always check dev packages)

*** yay prowlarr install

#+begin_src sh
yay -S prowlarr
#+end_src

**** prowlarr export

export the prowlarr binary to the host system

#+begin_src sh
distrobox-export --bin /usr/lib/prowlarr/bin/Prowlarr --export-path ~/.local/bin
#+end_src

**** prowlarr authentication

select forms login page

create a username and password

**** add the bin directory to your path

edit your ~/.zshenv file and add ~/.local/bin to your path

#+begin_src sh
typeset -U PATH path
path=("$HOME/bin" "$HOME/.local/bin" "/usr/local/bin" "$path[@]")
export PATH
#+end_src

** distrobox commands
** distrobox-enter

enter the container

#+begin_src sh
distrobox enter -n arch
#+end_src

** distrobox-export
*** export an application

enter the container

#+begin_src sh
distrobox-enter --name arch-distrobox
#+end_src

export an app

#+begin_src sh
distrobox-export --app atom
#+end_src

*** export a service

enter the container

#+begin_src sh
distrobox-enter --name ubuntu-21
#+end_src

install an application

#+begin_src sh
sudo apt install syncthing
#+end_src

export syncthingâ€™s service from the container back to the host by running:

#+begin_src sh
distrobox-export --service syncthing@ --extra-flags
#+end_src

output

#+begin_example
Service ubuntu-21-syncthing@.service successfully exported.
OK
ubuntu-21-syncthing@.service will appear in your services list in a few seconds.
To check the status, run:
        systemctl --user status ubuntu-21-syncthing@.service
To start it, run:
        systemctl --user start ubuntu-21-syncthing@.service
To start it at login, run:
        systemctl --user enable ubuntu-21-syncthing@.service
#+end_example

Now back on the host you can run:

#+begin_src sh
systemctl --user enable --now ubuntu-21-syncthing@$USER
#+end_src

** Exiting a distrobox

At any time you can exit the distrobox by simply using exit, or pressing Ctrl+D:

** Executing commands directly into a distrobox

#+begin_src sh
distrobox-enter --name fedora-toolbox-35 -- sudo dnf update -y
#+end_src

** Duplicating an existing distrobox

It comes handy to also have the ability to duplicate your existing distrobox. This is useful during for example distrobox updates, or to rename a distrobox, or simply snapshot it and save the image.

clone a container

#+begin_src sh
distrobox-create --name cloned-arch --clone arch-distrobox
#+end_src

enter the cloned container

#+begin_src sh
distrobox-enter --name cloned-arch
#+end_src

** Backup and restore a distrobox

To save, export and reuse an already configured container, you can leverage podman save together with podman import to create snapshots of your environment.

To save a container to an image with podman:

commit the container

#+begin_src sh
podman container commit -p distrobox_name image_name_you_choose
#+end_src

save the container image

#+begin_src sh
podman save image_name_you_choose:latest | gzip > image_name_you_choose.tar.gz
#+end_src

This will create a tar.gz of the container of your choice at that exact moment.
Now you can backup that archive or transfer it to another host, and to restore it just run

#+begin_src sh
podman import image_name_you_choose.tar.gz
#+end_src

And create a new container based on that image:

#+begin_src sh
distrobox-create --image image_name_you_choose:latest --name distrobox_name
#+end_src

enter the container

#+begin_src sh
distrobox-enter --name distrobox_name
#+end_src

** Managing your distroboxes

#+begin_src sh
podman ps -a
#+end_src

You can delete an existing distrobox using

stop the container

#+begin_src sh
podman stop your_distrobox_name
#+end_src

remove the container

#+begin_src sh
podman rm your_distrobox_name
#+end_src

** distrobox nvidia

#+begin_src sh
distrobox create --name example-nvidia-toolkit --additional-flags "--runtime=nvidia -e NVIDIA_VISIBLE_DEVICES=all -e NVIDIA_DRIVER_CAPABILITIES=all" --image nvidia/cuda
#+end_src
