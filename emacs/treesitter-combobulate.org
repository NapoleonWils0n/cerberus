#+STARTUP:content
* treesitter
** resources
*** treesitter

[[https://tree-sitter.github.io/tree-sitter/]]

[[https://github.com/tree-sitter/tree-sitter/wiki/List-of-parsers]]

[[https://www.masteringemacs.org/article/how-to-get-started-tree-sitter]]

*** combobulate

[[https://www.youtube.com/watch?v=y7f1P-358vE][Unlock the Power of Tree-sitter in Emacs with Combobulate]]

** debian 
*** packages

#+begin_src sh
doas apt install libtree-sitter-dev libtree-sitter0.22 tree-sitter-cli 
#+end_src

*** emacs init.el

#+begin_src emacs-lisp
;; ----------------------------------------------------------------------------------
;; treesitter
;; ----------------------------------------------------------------------------------

(require 'treesit)

;; Use `major-mode-remap-alist` for languages that have a Treesitter major mode.
;; M-x treesit-install-language-grammar bash
(add-to-list
 'treesit-language-source-alist
 '(bash "https://github.com/tree-sitter/tree-sitter-bash.git" "v0.20.1"))

(setq major-mode-remap-alist
      '((sh-mode . bash-ts-mode)))

;; treesitter explore open in side window
(add-to-list 'display-buffer-alist
   '("^*tree-sitter explorer *" display-buffer-in-side-window
     (side . right)
     (window-width . 0.50)))
#+end_src

** nixos
*** packages

#+begin_src nix
gcc
git
gnumake
#+end_src

*** emacs init.el

#+begin_src emacs-lisp
;; ----------------------------------------------------------------------------------
;; treesitter
;; ----------------------------------------------------------------------------------

(require 'treesit)

;; Use `major-mode-remap-alist` for languages that have a Treesitter major mode.
;; M-x treesit-install-language-grammar bash

(setq treesit-language-source-alist
      '((awk "https://github.com/Beaglefoot/tree-sitter-awk")
        (bash "https://github.com/tree-sitter/tree-sitter-bash")
        (c "https://github.com/tree-sitter/tree-sitter-c")
        (css "https://github.com/tree-sitter/tree-sitter-css")
        (diff "https://github.com/the-mikedavis/tree-sitter-diff")
        (elisp "https://github.com/Wilfred/tree-sitter-elisp")
        (html "https://github.com/tree-sitter/tree-sitter-html")
        (json "https://github.com/tree-sitter/tree-sitter-json")
        (make "https://github.com/tree-sitter-grammars/tree-sitter-make")
        (nix "https://github.com/nix-community/tree-sitter-nix")
        (python "https://github.com/tree-sitter/tree-sitter-python")
        (xml "https://github.com/panicinc/tree-sitter-xml")))

(setq major-mode-remap-alist
      '((sh-mode . bash-ts-mode)))

;; treesitter explore open in side window
(add-to-list 'display-buffer-alist
   '("^*tree-sitter explorer *" display-buffer-in-side-window
     (side . right)
     (window-width . 0.50)))
#+end_src

** combobulate
*** package-vc-selected-packages

#+begin_src emacs-lisp
;; ----------------------------------------------------------------------------------
;; emacs init.el - also using early-init.el
;; ----------------------------------------------------------------------------------

;; Use a hook so the message doesn't get clobbered by other messages.
(add-hook 'emacs-startup-hook
          (lambda ()
            (message "Emacs ready in %s with %d garbage collections."
                     (format "%.2f seconds"
                             (float-time
                              (time-subtract after-init-time before-init-time)))
                     gcs-done)))


;; ----------------------------------------------------------------------------------
;; Bootstrap use-package
;; ----------------------------------------------------------------------------------

(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(eval-when-compile
  (require 'use-package))

(setq use-package-always-ensure t) ;; Automatically install packages if not present

;; ----------------------------------------------------------------------------------
;; melpa packages
;; ----------------------------------------------------------------------------------

(unless (assoc-default "melpa" package-archives)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t))
(unless (assoc-default "elpa" package-archives)
  (add-to-list 'package-archives '("elpa" . "https://elpa.gnu.org/packages/") t))

;; package-vc-selected-packages
(setq package-vc-selected-packages
 '((combobulate :vc-backend Git :url "https://github.com/mickeynp/combobulate")))

;; package initialize (use-package will handle installation and requiring)
(package-initialize)
#+end_src

#+begin_example
M-x package-vc-install-selected-packages
#+end_example

*** combobulate init.el

#+begin_src emacs-lisp
;; ----------------------------------------------------------------------------------
;; combobulate
;; ----------------------------------------------------------------------------------

(use-package combobulate
   :bind
   ("C-c o o" . combobulate)
   :init
          (require 'combobulate-bash)
          (require 'combobulate-elisp)
   :hook ((bash-ts-mode . combobulate-mode)
          (css-ts-mode . combobulate-mode)
          (html-ts-mode . combobulate-mode)
          (json-ts-mode . combobulate-mode)
          (lisp-mode . combobulate-mode)
          (python-ts-mode . combobulate-mode)))

#+end_src

*** early-init.el

#+begin_example
~/.config/emacs/early-init.el
#+end_example

#+begin_src emacs-lisp
;;Tell emacs where is your personal elisp lib dir
(add-to-list 'load-path "~/.config/emacs/lisp/")
#+end_src

*** combobulate-bash.el

#+begin_example
~/.config/emacs/lisp/combobulate-bash.el
#+end_example

#+begin_src emacs-lisp
;;; combobulate-bash.el --- Bash mode support for Combobulate  -*- lexical-binding: t; -*-

;; Copyright (C) 2025 NapoleonWils0n

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

;;; Commentary:

;; Combobulate support for Bash based on tree-sitter.

;;; Code:

(require 'combobulate-settings)
(require 'combobulate-navigation)
(require 'combobulate-manipulation)
(require 'combobulate-interface)
(require 'combobulate-rules)
(require 'combobulate-setup)

;; S-expression-like navigation for function bodies and conditionals.
(defvar combobulate-bash-procedures-sexp
  '((:activation-nodes
     ((:nodes ("function_definition" "if_statement" "for_statement" "while_statement")))))
  "Combobulate `procedures-sexp' for `bash'.")

;; Sibling-based navigation, typically for moving between statements.
(defvar combobulate-bash-procedures-sibling
  '(;; General navigation at the file level
    (:activation-nodes
     ((:nodes
       ((rule "source_file"))
       :position at
       :has-parent nil))
     :selector (:match-children t))
    ;; Statement-level navigation inside a compound statement
    (:activation-nodes
     ((:nodes
       ((rule "compound_statement"))
       :position at
       :has-parent ((rule "function_definition"))))
     :selector (:choose parent :match-children t)))
  "Combobulate `procedures-sibling' for `bash'.")

;; Hierarchical navigation, for moving up and down the syntax tree.
(defvar combobulate-bash-procedures-hierarchy
  '(;; General navigation
    (:activation-nodes
     ((:nodes (exclude (all) "string") :position at))
     :selector (:choose node :match-children t)))
  "Combobulate `procedures-hierarchy' for `bash'.")

;; Logical operators, for moving between `&&` and `||` parts of a command.
(defvar combobulate-bash-procedures-logical
  '((:activation-nodes
     ((:nodes ("and" "or") :position at))
     :selector (:choose parent :match-children t)))
  "Combobulate `procedures-logical' for `bash'.")

;; Define what a `defun` is for navigation (e.g., M-a, M-e).
(defvar combobulate-bash-procedures-defun
  '((:activation-nodes
     ((:nodes ("function_definition")))))
  "Combobulate `procedures-defun' for `bash'.")

(defun combobulate-bash-setup (_))

(define-combobulate-language
 :name bash
 :language bash
 :major-modes (sh-mode bash-ts-mode)
 :setup-fn combobulate-bash-setup)

(provide 'combobulate-bash)

;;; combobulate-bash.el ends here
#+end_src

*** combobulate-elisp.el

#+begin_example
~/.config/emacs/lisp/combobulate-elisp.el
#+end_example

#+begin_src emacs-lisp
;;; combobulate-elisp.el --- Elisp mode support for Combobulate  -*- lexical-binding: t; -*-

;; Copyright (C) 2025 NapoleonWils0n

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

;;; Commentary:

;; Combobulate support for Emacs Lisp based on tree-sitter.

;;; Code:

(require 'combobulate-settings)
(require 'combobulate-navigation)
(require 'combobulate-manipulation)
(require 'combobulate-interface)
(require 'combobulate-rules)
(require 'combobulate-setup)

;; S-expression-like navigation, specifically for functions and expressions.
(defvar combobulate-elisp-procedures-sexp
  '((:activation-nodes
     ((:nodes ("call" "function-definition" "lambda"))))
     :selector (:choose node))
  "Combobulate `procedures-sexp' for `elisp'.")

;; Sibling-based navigation, for moving between top-level forms or statements within a body.
(defvar combobulate-elisp-procedures-sibling
  '(;; Navigation at the top-level of a file
    (:activation-nodes
     ((:nodes
       ((rule "source_file"))
       :position at
       :has-parent nil))
     :selector (:match-children t))
    ;; Navigation inside a function or expression body
    (:activation-nodes
     ((:nodes
       ((rule "body"))
       :position at
       :has-parent ((rule "function-definition" "lambda"))))
     :selector (:choose parent :match-children t)))
  "Combobulate `procedures-sibling' for `elisp'.")

;; Hierarchical navigation, for moving up and down the syntax tree.
(defvar combobulate-elisp-procedures-hierarchy
  '(;; General navigation
    (:activation-nodes
     ((:nodes (all) :position at))
     :selector (:choose node :match-children t)))
  "Combobulate `procedures-hierarchy' for `elisp'.")

;; Logical operators, for moving between the clauses of `and` or `or`.
(defvar combobulate-elisp-procedures-logical
  '((:activation-nodes
     ((:nodes ("and" "or") :position at))
     :selector (:choose parent :match-children t)))
  "Combobulate `procedures-logical' for `elisp'.")

;; Define what a `defun` is for navigation (e.g., M-a, M-e).
(defvar combobulate-elisp-procedures-defun
  '((:activation-nodes
     ((:nodes ("function-definition")))))
  "Combobulate `procedures-defun' for `elisp'.")

(defun combobulate-elisp-setup (_))

(define-combobulate-language
  :name elisp
  :language elisp
  :major-modes (emacs-lisp-mode lisp-mode elisp-ts-mode)
  :setup-fn combobulate-elisp-setup)

(provide 'combobulate-elisp)

;;; combobulate-elisp.el ends here
#+end_src

*** combobulate-nix.el

#+begin_example
~/.config/emacs/lisp/combobulate-nix.el
#+end_example

#+begin_src emacs-lisp
;;; combobulate-nix.el --- Nix mode support for Combobulate  -*- lexical-binding: t; -*-

;; Copyright (C) 2025 NapoleonWils0n

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

;;; Commentary:

;; Combobulate support for Nix based on tree-sitter.

;;; Code:

(require 'combobulate-settings)
(require 'combobulate-navigation)
(require 'combobulate-manipulation)
(require 'combobulate-interface)
(require 'combobulate-rules)
(require 'combobulate-setup)


;; S-expression-like navigation for function bodies and `let` blocks.
(defvar combobulate-nix-procedures-sexp
  '((:activation-nodes
     ((:nodes ("lambda" "let_in_statement" "if_else_expression"))))
     :selector (:choose node))
  "Combobulate `procedures-sexp' for `nix'.")

;; Sibling-based navigation, for moving between top-level forms or attributes in a set.
(defvar combobulate-nix-procedures-sibling
  '((:activation-nodes
     ((:nodes
       ((rule "source_file"))
       :position at
       :has-parent nil))
     :selector (:match-children t))
    ;; Navigation inside a let_in_statement body
    (:activation-nodes
     ((:nodes
       ((rule "let_in_statement"))
       :position at
       :has-parent nil))
     :selector (:match-query (:query (let_in_statement (_) @match) :engine combobulate)))
    ;; Navigation inside a set
    (:activation-nodes
     ((:nodes
       ((rule "attr_set"))
       :position at))
     :selector (:match-children t))
    ;; Navigation between bindings in a set or let block
    (:activation-nodes
     ((:nodes ("binding") :position at :has-parent ("attr_set" "let_in_statement")))\
     :selector (:choose parent :match-children t)))
  "Combobulate `procedures-sibling' for `nix'.")

;; Hierarchical navigation, for moving up and down the syntax tree.
(defvar combobulate-nix-procedures-hierarchy
  '(;; General navigation
    (:activation-nodes
     ((:nodes (all) :position at))\
     :selector (:choose node :match-children t)))
  "Combobulate `procedures-hierarchy' for `nix'.")

;; Logical operators, for moving between `&&` and `||` parts of an expression.
(defvar combobulate-nix-procedures-logical
  '((:activation-nodes
     ((:nodes ("or_operator" "and_operator") :position at))
     :selector (:choose parent :match-children t)))
  "Combobulate `procedures-logical' for `nix'.")

;; Define what a `defun` is for navigation (e.g., M-a, M-e).
(defvar combobulate-nix-procedures-defun
  '((:activation-nodes
     ((:nodes ("lambda"))))
     :selector (:choose node))
  "Combobulate `procedures-defun' for `nix'.")

(defun combobulate-nix-pretty-print-node-name (node default-name)
  "Pretty-print the name of NODE."
  (pcase (combobulate-node-type node)
    ("lambda"
     (let* ((name-node (combobulate-node-child-by-field node "param"))
            (name (if name-node (combobulate-node-text name-node) "lambda")))
       (combobulate-string-truncate name)))
    ("inherit_expression"
     (let* ((name-node (combobulate-node-child-by-field node "attr_path"))
            (name (if name-node (combobulate-node-text name-node) "inherit")))
       (combobulate-string-truncate name)))
    ("binding"
     (let* ((name-node (combobulate-node-child-by-field node "attr_path"))
            (name (if name-node (combobulate-node-text name-node) "binding")))
       (combobulate-string-truncate name)))
    (_ default-name)))

(defvar combobulate-nix-definitions
  `((context-nodes
     '("string_escape" "string_content" "path"))
    (pretty-print-node-name-function #'combobulate-nix-pretty-print-node-name)
    (procedures-sexp . ,combobulate-nix-procedures-sexp)
    (procedures-sibling . ,combobulate-nix-procedures-sibling)
    (procedures-hierarchy . ,combobulate-nix-procedures-hierarchy)
    (procedures-logical . ,combobulate-nix-procedures-logical)
    (procedures-defun . ,combobulate-nix-procedures-defun)))

(defun combobulate-nix-setup (_))

(define-combobulate-language
 :name nix
 :language nix
 :major-modes (nix-mode nix-ts-mode)
 :custom combobulate-nix-definitions
 :setup-fn combobulate-nix-setup)

(provide 'combobulate-nix)
;;; combobulate-nix.el ends here
#+end_src
