#+STARTUP: showall
* doom modeline now playing

#+begin_src emacs-lisp
;; ----------------------------------------------------------------------------------
;; doom modeline now playing
;; ----------------------------------------------------------------------------------

;; now playing
(require 'doom-modeline-now-playing)
(setq doom-modeline-now-playing t)

;; max length
(setq doom-modeline-now-playing-max-length 35)

;; update interval 1 second
(setq doom-modeline-now-playing-interval 1)

;; playerctl format
(setq doom-modeline-now-playing-playerctl-format "[{{duration(position)}}/{{duration(mpris:length)}}] {{title}}")

;; ignored player set to empty
(setq doom-modeline-now-playing-playerctl-ignored-players '(""))

;; modeline
(with-eval-after-load 'doom-modeline-now-playing
(doom-modeline-def-segment now-playing
  "Display current media playback status."
  (when (and doom-modeline-now-playing
             doom-modeline-now-playing-status)
    (let ((player (oref doom-modeline-now-playing-status player))
          (status (oref doom-modeline-now-playing-status status))
          (text   (oref doom-modeline-now-playing-status text)))
      (when (and player status text
                 (not (string= player "No players found")))
        (concat
         (propertize (if (equal status "playing")
                        (doom-modeline-icon 'faicon "nf-fa-play" "" ">"
                                          :v-adjust -0)
                      (doom-modeline-icon 'faicon "nf-fa-pause" "" "||"
                                        :v-adjust -0))
                    'mouse-face 'mode-line-highlight
                    'help-echo "mouse-1: Toggle player status"
                    'local-map (let ((map (make-sparse-keymap)))
                               (define-key map [mode-line mouse-1]
                                         'doom-modeline-now-playing-toggle-status)
                               map))
         (doom-modeline-spc)
         (propertize
          (truncate-string-to-width text doom-modeline-now-playing-max-length nil nil "...")
          'face 'doom-modeline-now-playing-text)))))))

;; doom-modeline-now-playing-timer - keep at bottom
(doom-modeline-now-playing-timer)

;; ----------------------------------------------------------------------------------
;; doom modeline elements order
;; ----------------------------------------------------------------------------------

;; Ensure doom-modeline-def-modeline runs after the package is loaded
(eval-after-load 'doom-modeline
  (lambda ()
    ;; doom modeline elements order
    (doom-modeline-def-modeline 'main
      '(bar matches buffer-info remote-host buffer-position selection-info now-playing)
      '(misc-info minor-modes input-method buffer-encoding major-mode process vcs check battery time))

    ;; Optional: Force modeline update to see changes immediately
    (force-mode-line-update)
    (message "Doom Modeline segments redefined successfully.")
    ))
#+end_src
